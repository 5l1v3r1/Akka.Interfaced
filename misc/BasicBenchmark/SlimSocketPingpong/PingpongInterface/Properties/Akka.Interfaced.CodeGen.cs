// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region PingpongInterface.IServer

namespace PingpongInterface
{
    [PayloadTableForInterfacedActor(typeof(IServer))]
    public static class IServer_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Echo_Invoke), typeof(Echo_Return) },
            };
        }

        [ProtoContract, TypeAlias]
        public class Echo_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int32 value;
            public Type GetInterfaceType() { return typeof(IServer); }
            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await ((IServer)target).Echo(value);
                return (IValueGetable)(new Echo_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class Echo_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Int32 v;
            public Type GetInterfaceType() { return typeof(IServer); }
            public object Value { get { return v; } }
        }
    }

    public interface IServer_NoReply
    {
        void Echo(System.Int32 value);
    }

    [ProtoContract, TypeAlias]
    public class ServerRef : InterfacedActorRef, IServer, IServer_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private ServerRef() : base(null)
        {
        }

        public ServerRef(IActorRef actor) : base(actor)
        {
        }

        public ServerRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IServer_NoReply WithNoReply()
        {
            return this;
        }

        public ServerRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new ServerRef(Actor, requestWaiter, Timeout);
        }

        public ServerRef WithTimeout(TimeSpan? timeout)
        {
            return new ServerRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Int32> Echo(System.Int32 value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IServer_PayloadTable.Echo_Invoke { value = value }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        void IServer_NoReply.Echo(System.Int32 value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IServer_PayloadTable.Echo_Invoke { value = value }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
