// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Actor;
using Akka.Interfaced;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region Akka.Interfaced.ProtobufSerializer.Tests.IDefault

namespace Akka.Interfaced.ProtobufSerializer.Tests
{
    [MessageTableForInterfacedActor(typeof(IDefault))]
    public static class IDefault__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(IDefault__Call__Invoke), null},
                {typeof(IDefault__CallWithDefault__Invoke), null},
            };
        }
    }

    [ProtoContract, TypeAlias]
    public class IDefault__Call__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        [ProtoMember(1)] public System.Int32 a;
        [ProtoMember(2)] public System.Int32 b;
        [ProtoMember(3)] public System.String c;

        public Type GetInterfaceType() { return typeof(IDefault); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IDefault)target).Call(a, b, c);
            return null;
        }
    }

    [ProtoContract, TypeAlias]
    public class IDefault__CallWithDefault__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        [ProtoMember(1), DefaultValue(1)] public System.Int32 a = 1;
        [ProtoMember(2), DefaultValue(2)] public System.Int32 b = 2;
        [ProtoMember(3), DefaultValue("Test")] public System.String c = "Test";

        public Type GetInterfaceType() { return typeof(IDefault); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IDefault)target).CallWithDefault(a, b, c);
            return null;
        }
    }

    public interface IDefault_NoReply
    {
        void Call(System.Int32 a, System.Int32 b, System.String c);
        void CallWithDefault(System.Int32 a = 1, System.Int32 b = 2, System.String c = "Test");
    }

    [ProtoContract, TypeAlias]
    public class DefaultRef : InterfacedActorRef, IDefault, IDefault_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private DefaultRef()
            : base(null)
        {
        }

        public DefaultRef(IActorRef actor)
            : base(actor)
        {
        }

        public DefaultRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IDefault_NoReply WithNoReply()
        {
            return this;
        }

        public DefaultRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new DefaultRef(Actor, requestWaiter, Timeout);
        }

        public DefaultRef WithTimeout(TimeSpan? timeout)
        {
            return new DefaultRef(Actor, RequestWaiter, timeout);
        }

        public Task Call(System.Int32 a, System.Int32 b, System.String c)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IDefault__Call__Invoke { a = a, b = b, c = c }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task CallWithDefault(System.Int32 a = 1, System.Int32 b = 2, System.String c = "Test")
        {
            var requestMessage = new RequestMessage
            {
                Message = new IDefault__CallWithDefault__Invoke { a = a, b = b, c = c }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IDefault_NoReply.Call(System.Int32 a, System.Int32 b, System.String c)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IDefault__Call__Invoke { a = a, b = b, c = c }
            };
            SendRequest(requestMessage);
        }

        void IDefault_NoReply.CallWithDefault(System.Int32 a, System.Int32 b, System.String c)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IDefault__CallWithDefault__Invoke { a = a, b = b, c = c }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
