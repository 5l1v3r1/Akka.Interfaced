using System;
using System.Collections.Generic;
using System.Linq;
using CodeWriter;

namespace CodeGenerator
{
    public class EntryCodeGenerator
    {
        public Options Options { get; }
        public CodeWriter.CodeWriter CodeWriter { get; set; }

        public EntryCodeGenerator(Options options)
        {
            Options = options;

            var settings = new CodeWriterSettings(CodeWriterSettings.CSharpDefault);
            settings.TranslationMapping["`"] = "\"";
            CodeWriter = new CodeWriter.CodeWriter(settings);

            GenerateHead();
        }

        private void GenerateHead()
        {
            CodeWriter.HeadLines = new List<string>()
                {
                    "// ------------------------------------------------------------------------------",
                    "// <auto-generated>",
                    "//     This code was generated by Akka.Interfaced CodeGenerator.",
                    "//",
                    "//     Changes to this file may cause incorrect behavior and will be lost if",
                    "//     the code is regenerated.",
                    "// </auto-generated>",
                    "// ------------------------------------------------------------------------------",
                    "",
                    "using System;",
                    "using System.Threading.Tasks;",
                    "using Akka.Interfaced;",
                };

            if (Options.UseSlimClient == false)
                CodeWriter.HeadLines.Add("using Akka.Actor;");

            if (Options.UseProtobuf)
            {
                CodeWriter.HeadLines.Add("using ProtoBuf;");
                CodeWriter.HeadLines.Add("using TypeAlias;");
                CodeWriter.HeadLines.Add("using System.ComponentModel;");
            }

            CodeWriter.HeadLines.Add("");
        }

        public void GenerateCode(Type[] types)
        {
            var actorTypes = types.Where(t => Utility.IsActorInterface(t)).ToArray();
            var observerTypes = types.Where(t => Utility.IsObserverInterface(t)).ToArray();

            var actorCodeGen = new InterfacedActorCodeGenerator() { Options = Options };
            foreach (var type in actorTypes)
                actorCodeGen.GenerateCode(type, CodeWriter);

            var observerCodeGen = new InterfacedObserverCodeGenerator() { Options = Options };
            foreach (var type in observerTypes)
                observerCodeGen.GenerateCode(type, CodeWriter);
        }
    }
}
