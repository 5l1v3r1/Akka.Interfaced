// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;

#region Akka.Interfaced.IBasic

namespace Akka.Interfaced
{
    [PayloadTable(typeof(IBasic), PayloadTableKind.Request)]
    public static class IBasic_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Call_Invoke), null },
                { typeof(CallWithParameter_Invoke), null },
                { typeof(CallWithParameterAndReturn_Invoke), typeof(CallWithParameterAndReturn_Return) },
                { typeof(CallWithReturn_Invoke), typeof(CallWithReturn_Return) },
                { typeof(ThrowException_Invoke), typeof(ThrowException_Return) },
            };
        }

        public class Call_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IBasic);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IBasic)__target).Call();
                return null;
            }
        }

        public class CallWithParameter_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Int32 value;

            public Type GetInterfaceType()
            {
                return typeof(IBasic);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IBasic)__target).CallWithParameter(value);
                return null;
            }
        }

        public class CallWithParameterAndReturn_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Int32 value;

            public Type GetInterfaceType()
            {
                return typeof(IBasic);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IBasic)__target).CallWithParameterAndReturn(value);
                return (IValueGetable)(new CallWithParameterAndReturn_Return { v = __v });
            }
        }

        public class CallWithParameterAndReturn_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Int32 v;

            public Type GetInterfaceType()
            {
                return typeof(IBasic);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class CallWithReturn_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IBasic);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IBasic)__target).CallWithReturn();
                return (IValueGetable)(new CallWithReturn_Return { v = __v });
            }
        }

        public class CallWithReturn_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Int32 v;

            public Type GetInterfaceType()
            {
                return typeof(IBasic);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class ThrowException_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Akka.Interfaced.ThrowExceptionType type;

            public Type GetInterfaceType()
            {
                return typeof(IBasic);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IBasic)__target).ThrowException(type);
                return (IValueGetable)(new ThrowException_Return { v = __v });
            }
        }

        public class ThrowException_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Int32 v;

            public Type GetInterfaceType()
            {
                return typeof(IBasic);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IBasic_NoReply
    {
        void Call();
        void CallWithParameter(System.Int32 value);
        void CallWithParameterAndReturn(System.Int32 value);
        void CallWithReturn();
        void ThrowException(Akka.Interfaced.ThrowExceptionType type);
    }

    public class BasicRef : InterfacedActorRef, IBasic, IBasic_NoReply
    {
        public override Type InterfaceType => typeof(IBasic);

        public BasicRef() : base(null)
        {
        }

        public BasicRef(IRequestTarget target) : base(target)
        {
        }

        public BasicRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IBasic_NoReply WithNoReply()
        {
            return this;
        }

        public BasicRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new BasicRef(Target, requestWaiter, Timeout);
        }

        public BasicRef WithTimeout(TimeSpan? timeout)
        {
            return new BasicRef(Target, RequestWaiter, timeout);
        }

        public Task Call()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasic_PayloadTable.Call_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task CallWithParameter(System.Int32 value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasic_PayloadTable.CallWithParameter_Invoke { value = value }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Int32> CallWithParameterAndReturn(System.Int32 value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasic_PayloadTable.CallWithParameterAndReturn_Invoke { value = value }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> CallWithReturn()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasic_PayloadTable.CallWithReturn_Invoke {  }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> ThrowException(Akka.Interfaced.ThrowExceptionType type)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasic_PayloadTable.ThrowException_Invoke { type = type }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        void IBasic_NoReply.Call()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasic_PayloadTable.Call_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IBasic_NoReply.CallWithParameter(System.Int32 value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasic_PayloadTable.CallWithParameter_Invoke { value = value }
            };
            SendRequest(requestMessage);
        }

        void IBasic_NoReply.CallWithParameterAndReturn(System.Int32 value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasic_PayloadTable.CallWithParameterAndReturn_Invoke { value = value }
            };
            SendRequest(requestMessage);
        }

        void IBasic_NoReply.CallWithReturn()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasic_PayloadTable.CallWithReturn_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IBasic_NoReply.ThrowException(Akka.Interfaced.ThrowExceptionType type)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasic_PayloadTable.ThrowException_Invoke { type = type }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IBasic))]
    public interface IBasicSync : IInterfacedActorSync
    {
        void Call();
        void CallWithParameter(System.Int32 value);
        System.Int32 CallWithParameterAndReturn(System.Int32 value);
        System.Int32 CallWithReturn();
        System.Int32 ThrowException(Akka.Interfaced.ThrowExceptionType type);
    }
}

#endregion
#region Akka.Interfaced.IDummy

namespace Akka.Interfaced
{
    [PayloadTable(typeof(IDummy), PayloadTableKind.Request)]
    public static class IDummy_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Call_Invoke), typeof(Call_Return) },
            };
        }

        public class Call_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Object param;

            public Type GetInterfaceType()
            {
                return typeof(IDummy);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDummy)__target).Call(param);
                return (IValueGetable)(new Call_Return { v = __v });
            }
        }

        public class Call_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Object v;

            public Type GetInterfaceType()
            {
                return typeof(IDummy);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IDummy_NoReply
    {
        void Call(System.Object param);
    }

    public class DummyRef : InterfacedActorRef, IDummy, IDummy_NoReply
    {
        public override Type InterfaceType => typeof(IDummy);

        public DummyRef() : base(null)
        {
        }

        public DummyRef(IRequestTarget target) : base(target)
        {
        }

        public DummyRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IDummy_NoReply WithNoReply()
        {
            return this;
        }

        public DummyRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new DummyRef(Target, requestWaiter, Timeout);
        }

        public DummyRef WithTimeout(TimeSpan? timeout)
        {
            return new DummyRef(Target, RequestWaiter, timeout);
        }

        public Task<System.Object> Call(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummy_PayloadTable.Call_Invoke { param = param }
            };
            return SendRequestAndReceive<System.Object>(requestMessage);
        }

        void IDummy_NoReply.Call(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummy_PayloadTable.Call_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IDummy))]
    public interface IDummySync : IInterfacedActorSync
    {
        System.Object Call(System.Object param);
    }
}

#endregion
#region Akka.Interfaced.IDummyEx

namespace Akka.Interfaced
{
    [PayloadTable(typeof(IDummyEx), PayloadTableKind.Request)]
    public static class IDummyEx_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(CallEx_Invoke), typeof(CallEx_Return) },
            };
        }

        public class CallEx_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Object param;

            public Type GetInterfaceType()
            {
                return typeof(IDummyEx);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDummyEx)__target).CallEx(param);
                return (IValueGetable)(new CallEx_Return { v = __v });
            }
        }

        public class CallEx_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Object v;

            public Type GetInterfaceType()
            {
                return typeof(IDummyEx);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IDummyEx_NoReply : IDummy_NoReply
    {
        void CallEx(System.Object param);
    }

    public class DummyExRef : InterfacedActorRef, IDummyEx, IDummyEx_NoReply
    {
        public override Type InterfaceType => typeof(IDummyEx);

        public DummyExRef() : base(null)
        {
        }

        public DummyExRef(IRequestTarget target) : base(target)
        {
        }

        public DummyExRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IDummyEx_NoReply WithNoReply()
        {
            return this;
        }

        public DummyExRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new DummyExRef(Target, requestWaiter, Timeout);
        }

        public DummyExRef WithTimeout(TimeSpan? timeout)
        {
            return new DummyExRef(Target, RequestWaiter, timeout);
        }

        public Task<System.Object> CallEx(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummyEx_PayloadTable.CallEx_Invoke { param = param }
            };
            return SendRequestAndReceive<System.Object>(requestMessage);
        }

        public Task<System.Object> Call(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummy_PayloadTable.Call_Invoke { param = param }
            };
            return SendRequestAndReceive<System.Object>(requestMessage);
        }

        void IDummyEx_NoReply.CallEx(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummyEx_PayloadTable.CallEx_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }

        void IDummy_NoReply.Call(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummy_PayloadTable.Call_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IDummyEx))]
    public interface IDummyExSync : IDummySync
    {
        System.Object CallEx(System.Object param);
    }
}

#endregion
#region Akka.Interfaced.IDummyEx2

namespace Akka.Interfaced
{
    [PayloadTable(typeof(IDummyEx2), PayloadTableKind.Request)]
    public static class IDummyEx2_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(CallEx2_Invoke), typeof(CallEx2_Return) },
            };
        }

        public class CallEx2_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Object param;

            public Type GetInterfaceType()
            {
                return typeof(IDummyEx2);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDummyEx2)__target).CallEx2(param);
                return (IValueGetable)(new CallEx2_Return { v = __v });
            }
        }

        public class CallEx2_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Object v;

            public Type GetInterfaceType()
            {
                return typeof(IDummyEx2);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IDummyEx2_NoReply : IDummy_NoReply
    {
        void CallEx2(System.Object param);
    }

    public class DummyEx2Ref : InterfacedActorRef, IDummyEx2, IDummyEx2_NoReply
    {
        public override Type InterfaceType => typeof(IDummyEx2);

        public DummyEx2Ref() : base(null)
        {
        }

        public DummyEx2Ref(IRequestTarget target) : base(target)
        {
        }

        public DummyEx2Ref(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IDummyEx2_NoReply WithNoReply()
        {
            return this;
        }

        public DummyEx2Ref WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new DummyEx2Ref(Target, requestWaiter, Timeout);
        }

        public DummyEx2Ref WithTimeout(TimeSpan? timeout)
        {
            return new DummyEx2Ref(Target, RequestWaiter, timeout);
        }

        public Task<System.Object> CallEx2(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummyEx2_PayloadTable.CallEx2_Invoke { param = param }
            };
            return SendRequestAndReceive<System.Object>(requestMessage);
        }

        public Task<System.Object> Call(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummy_PayloadTable.Call_Invoke { param = param }
            };
            return SendRequestAndReceive<System.Object>(requestMessage);
        }

        void IDummyEx2_NoReply.CallEx2(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummyEx2_PayloadTable.CallEx2_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }

        void IDummy_NoReply.Call(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummy_PayloadTable.Call_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IDummyEx2))]
    public interface IDummyEx2Sync : IDummySync
    {
        System.Object CallEx2(System.Object param);
    }
}

#endregion
#region Akka.Interfaced.IDummyExFinal

namespace Akka.Interfaced
{
    [PayloadTable(typeof(IDummyExFinal), PayloadTableKind.Request)]
    public static class IDummyExFinal_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(CallExFinal_Invoke), typeof(CallExFinal_Return) },
            };
        }

        public class CallExFinal_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Object param;

            public Type GetInterfaceType()
            {
                return typeof(IDummyExFinal);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDummyExFinal)__target).CallExFinal(param);
                return (IValueGetable)(new CallExFinal_Return { v = __v });
            }
        }

        public class CallExFinal_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Object v;

            public Type GetInterfaceType()
            {
                return typeof(IDummyExFinal);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IDummyExFinal_NoReply : IDummyEx_NoReply, IDummy_NoReply, IDummyEx2_NoReply
    {
        void CallExFinal(System.Object param);
    }

    public class DummyExFinalRef : InterfacedActorRef, IDummyExFinal, IDummyExFinal_NoReply
    {
        public override Type InterfaceType => typeof(IDummyExFinal);

        public DummyExFinalRef() : base(null)
        {
        }

        public DummyExFinalRef(IRequestTarget target) : base(target)
        {
        }

        public DummyExFinalRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IDummyExFinal_NoReply WithNoReply()
        {
            return this;
        }

        public DummyExFinalRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new DummyExFinalRef(Target, requestWaiter, Timeout);
        }

        public DummyExFinalRef WithTimeout(TimeSpan? timeout)
        {
            return new DummyExFinalRef(Target, RequestWaiter, timeout);
        }

        public Task<System.Object> CallExFinal(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummyExFinal_PayloadTable.CallExFinal_Invoke { param = param }
            };
            return SendRequestAndReceive<System.Object>(requestMessage);
        }

        public Task<System.Object> CallEx(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummyEx_PayloadTable.CallEx_Invoke { param = param }
            };
            return SendRequestAndReceive<System.Object>(requestMessage);
        }

        public Task<System.Object> Call(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummy_PayloadTable.Call_Invoke { param = param }
            };
            return SendRequestAndReceive<System.Object>(requestMessage);
        }

        public Task<System.Object> CallEx2(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummyEx2_PayloadTable.CallEx2_Invoke { param = param }
            };
            return SendRequestAndReceive<System.Object>(requestMessage);
        }

        void IDummyExFinal_NoReply.CallExFinal(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummyExFinal_PayloadTable.CallExFinal_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }

        void IDummyEx_NoReply.CallEx(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummyEx_PayloadTable.CallEx_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }

        void IDummy_NoReply.Call(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummy_PayloadTable.Call_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }

        void IDummyEx2_NoReply.CallEx2(System.Object param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDummyEx2_PayloadTable.CallEx2_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IDummyExFinal))]
    public interface IDummyExFinalSync : IDummyExSync, IDummySync, IDummyEx2Sync
    {
        System.Object CallExFinal(System.Object param);
    }
}

#endregion
#region Akka.Interfaced.IOverloaded

namespace Akka.Interfaced
{
    [PayloadTable(typeof(IOverloaded), PayloadTableKind.Request)]
    public static class IOverloaded_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Min_Invoke), typeof(Min_Return) },
                { typeof(Min_2_Invoke), typeof(Min_2_Return) },
                { typeof(Min_3_Invoke), typeof(Min_3_Return) },
            };
        }

        public class Min_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Int32 a;
            public System.Int32 b;

            public Type GetInterfaceType()
            {
                return typeof(IOverloaded);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IOverloaded)__target).Min(a, b);
                return (IValueGetable)(new Min_Return { v = __v });
            }
        }

        public class Min_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Int32 v;

            public Type GetInterfaceType()
            {
                return typeof(IOverloaded);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class Min_2_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Int32 a;
            public System.Int32 b;
            public System.Int32 c;

            public Type GetInterfaceType()
            {
                return typeof(IOverloaded);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IOverloaded)__target).Min(a, b, c);
                return (IValueGetable)(new Min_2_Return { v = __v });
            }
        }

        public class Min_2_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Int32 v;

            public Type GetInterfaceType()
            {
                return typeof(IOverloaded);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class Min_3_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Int32[] nums;

            public Type GetInterfaceType()
            {
                return typeof(IOverloaded);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IOverloaded)__target).Min(nums);
                return (IValueGetable)(new Min_3_Return { v = __v });
            }
        }

        public class Min_3_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Int32 v;

            public Type GetInterfaceType()
            {
                return typeof(IOverloaded);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IOverloaded_NoReply
    {
        void Min(System.Int32 a, System.Int32 b);
        void Min(System.Int32 a, System.Int32 b, System.Int32 c);
        void Min(params System.Int32[] nums);
    }

    public class OverloadedRef : InterfacedActorRef, IOverloaded, IOverloaded_NoReply
    {
        public override Type InterfaceType => typeof(IOverloaded);

        public OverloadedRef() : base(null)
        {
        }

        public OverloadedRef(IRequestTarget target) : base(target)
        {
        }

        public OverloadedRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IOverloaded_NoReply WithNoReply()
        {
            return this;
        }

        public OverloadedRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new OverloadedRef(Target, requestWaiter, Timeout);
        }

        public OverloadedRef WithTimeout(TimeSpan? timeout)
        {
            return new OverloadedRef(Target, RequestWaiter, timeout);
        }

        public Task<System.Int32> Min(System.Int32 a, System.Int32 b)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOverloaded_PayloadTable.Min_Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> Min(System.Int32 a, System.Int32 b, System.Int32 c)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOverloaded_PayloadTable.Min_2_Invoke { a = a, b = b, c = c }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> Min(params System.Int32[] nums)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOverloaded_PayloadTable.Min_3_Invoke { nums = nums }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        void IOverloaded_NoReply.Min(System.Int32 a, System.Int32 b)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOverloaded_PayloadTable.Min_Invoke { a = a, b = b }
            };
            SendRequest(requestMessage);
        }

        void IOverloaded_NoReply.Min(System.Int32 a, System.Int32 b, System.Int32 c)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOverloaded_PayloadTable.Min_2_Invoke { a = a, b = b, c = c }
            };
            SendRequest(requestMessage);
        }

        void IOverloaded_NoReply.Min(params System.Int32[] nums)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOverloaded_PayloadTable.Min_3_Invoke { nums = nums }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IOverloaded))]
    public interface IOverloadedSync : IInterfacedActorSync
    {
        System.Int32 Min(System.Int32 a, System.Int32 b);
        System.Int32 Min(System.Int32 a, System.Int32 b, System.Int32 c);
        System.Int32 Min(params System.Int32[] nums);
    }
}

#endregion
#region Akka.Interfaced.ISubject

namespace Akka.Interfaced
{
    [PayloadTable(typeof(ISubject), PayloadTableKind.Request)]
    public static class ISubject_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(MakeEvent_Invoke), null },
                { typeof(Subscribe_Invoke), null },
                { typeof(Unsubscribe_Invoke), null },
            };
        }

        public class MakeEvent_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.String eventName;

            public Type GetInterfaceType()
            {
                return typeof(ISubject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubject)__target).MakeEvent(eventName);
                return null;
            }
        }

        public class Subscribe_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public Akka.Interfaced.ISubjectObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(ISubject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubject)__target).Subscribe(observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        public class Unsubscribe_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public Akka.Interfaced.ISubjectObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(ISubject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubject)__target).Unsubscribe(observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }
    }

    public interface ISubject_NoReply
    {
        void MakeEvent(System.String eventName);
        void Subscribe(Akka.Interfaced.ISubjectObserver observer);
        void Unsubscribe(Akka.Interfaced.ISubjectObserver observer);
    }

    public class SubjectRef : InterfacedActorRef, ISubject, ISubject_NoReply
    {
        public override Type InterfaceType => typeof(ISubject);

        public SubjectRef() : base(null)
        {
        }

        public SubjectRef(IRequestTarget target) : base(target)
        {
        }

        public SubjectRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public ISubject_NoReply WithNoReply()
        {
            return this;
        }

        public SubjectRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new SubjectRef(Target, requestWaiter, Timeout);
        }

        public SubjectRef WithTimeout(TimeSpan? timeout)
        {
            return new SubjectRef(Target, RequestWaiter, timeout);
        }

        public Task MakeEvent(System.String eventName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject_PayloadTable.MakeEvent_Invoke { eventName = eventName }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Subscribe(Akka.Interfaced.ISubjectObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject_PayloadTable.Subscribe_Invoke { observer = (SubjectObserver)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Unsubscribe(Akka.Interfaced.ISubjectObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject_PayloadTable.Unsubscribe_Invoke { observer = (SubjectObserver)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        void ISubject_NoReply.MakeEvent(System.String eventName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject_PayloadTable.MakeEvent_Invoke { eventName = eventName }
            };
            SendRequest(requestMessage);
        }

        void ISubject_NoReply.Subscribe(Akka.Interfaced.ISubjectObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject_PayloadTable.Subscribe_Invoke { observer = (SubjectObserver)observer }
            };
            SendRequest(requestMessage);
        }

        void ISubject_NoReply.Unsubscribe(Akka.Interfaced.ISubjectObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject_PayloadTable.Unsubscribe_Invoke { observer = (SubjectObserver)observer }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(ISubject))]
    public interface ISubjectSync : IInterfacedActorSync
    {
        void MakeEvent(System.String eventName);
        void Subscribe(Akka.Interfaced.ISubjectObserver observer);
        void Unsubscribe(Akka.Interfaced.ISubjectObserver observer);
    }
}

#endregion
#region Akka.Interfaced.ISubject2

namespace Akka.Interfaced
{
    [PayloadTable(typeof(ISubject2), PayloadTableKind.Request)]
    public static class ISubject2_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(MakeEvent_Invoke), null },
                { typeof(MakeEvent2_Invoke), null },
                { typeof(Subscribe_Invoke), null },
                { typeof(Unsubscribe_Invoke), null },
            };
        }

        public class MakeEvent_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.String eventName;

            public Type GetInterfaceType()
            {
                return typeof(ISubject2);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubject2)__target).MakeEvent(eventName);
                return null;
            }
        }

        public class MakeEvent2_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.String eventName;

            public Type GetInterfaceType()
            {
                return typeof(ISubject2);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubject2)__target).MakeEvent2(eventName);
                return null;
            }
        }

        public class Subscribe_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public Akka.Interfaced.ISubject2Observer observer;

            public Type GetInterfaceType()
            {
                return typeof(ISubject2);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubject2)__target).Subscribe(observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        public class Unsubscribe_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public Akka.Interfaced.ISubject2Observer observer;

            public Type GetInterfaceType()
            {
                return typeof(ISubject2);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubject2)__target).Unsubscribe(observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }
    }

    public interface ISubject2_NoReply
    {
        void MakeEvent(System.String eventName);
        void MakeEvent2(System.String eventName);
        void Subscribe(Akka.Interfaced.ISubject2Observer observer);
        void Unsubscribe(Akka.Interfaced.ISubject2Observer observer);
    }

    public class Subject2Ref : InterfacedActorRef, ISubject2, ISubject2_NoReply
    {
        public override Type InterfaceType => typeof(ISubject2);

        public Subject2Ref() : base(null)
        {
        }

        public Subject2Ref(IRequestTarget target) : base(target)
        {
        }

        public Subject2Ref(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public ISubject2_NoReply WithNoReply()
        {
            return this;
        }

        public Subject2Ref WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new Subject2Ref(Target, requestWaiter, Timeout);
        }

        public Subject2Ref WithTimeout(TimeSpan? timeout)
        {
            return new Subject2Ref(Target, RequestWaiter, timeout);
        }

        public Task MakeEvent(System.String eventName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject2_PayloadTable.MakeEvent_Invoke { eventName = eventName }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task MakeEvent2(System.String eventName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject2_PayloadTable.MakeEvent2_Invoke { eventName = eventName }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Subscribe(Akka.Interfaced.ISubject2Observer observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject2_PayloadTable.Subscribe_Invoke { observer = (Subject2Observer)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Unsubscribe(Akka.Interfaced.ISubject2Observer observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject2_PayloadTable.Unsubscribe_Invoke { observer = (Subject2Observer)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        void ISubject2_NoReply.MakeEvent(System.String eventName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject2_PayloadTable.MakeEvent_Invoke { eventName = eventName }
            };
            SendRequest(requestMessage);
        }

        void ISubject2_NoReply.MakeEvent2(System.String eventName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject2_PayloadTable.MakeEvent2_Invoke { eventName = eventName }
            };
            SendRequest(requestMessage);
        }

        void ISubject2_NoReply.Subscribe(Akka.Interfaced.ISubject2Observer observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject2_PayloadTable.Subscribe_Invoke { observer = (Subject2Observer)observer }
            };
            SendRequest(requestMessage);
        }

        void ISubject2_NoReply.Unsubscribe(Akka.Interfaced.ISubject2Observer observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubject2_PayloadTable.Unsubscribe_Invoke { observer = (Subject2Observer)observer }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(ISubject2))]
    public interface ISubject2Sync : IInterfacedActorSync
    {
        void MakeEvent(System.String eventName);
        void MakeEvent2(System.String eventName);
        void Subscribe(Akka.Interfaced.ISubject2Observer observer);
        void Unsubscribe(Akka.Interfaced.ISubject2Observer observer);
    }
}

#endregion
#region Akka.Interfaced.ISubjectEx

namespace Akka.Interfaced
{
    [PayloadTable(typeof(ISubjectEx), PayloadTableKind.Request)]
    public static class ISubjectEx_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(MakeEvent_Invoke), null },
                { typeof(MakeEventEx_Invoke), null },
                { typeof(Subscribe_Invoke), null },
                { typeof(Unsubscribe_Invoke), null },
            };
        }

        public class MakeEvent_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.String eventName;

            public Type GetInterfaceType()
            {
                return typeof(ISubjectEx);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubjectEx)__target).MakeEvent(eventName);
                return null;
            }
        }

        public class MakeEventEx_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.String eventName;

            public Type GetInterfaceType()
            {
                return typeof(ISubjectEx);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubjectEx)__target).MakeEventEx(eventName);
                return null;
            }
        }

        public class Subscribe_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public Akka.Interfaced.ISubjectExObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(ISubjectEx);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubjectEx)__target).Subscribe(observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        public class Unsubscribe_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public Akka.Interfaced.ISubjectExObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(ISubjectEx);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISubjectEx)__target).Unsubscribe(observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }
    }

    public interface ISubjectEx_NoReply
    {
        void MakeEvent(System.String eventName);
        void MakeEventEx(System.String eventName);
        void Subscribe(Akka.Interfaced.ISubjectExObserver observer);
        void Unsubscribe(Akka.Interfaced.ISubjectExObserver observer);
    }

    public class SubjectExRef : InterfacedActorRef, ISubjectEx, ISubjectEx_NoReply
    {
        public override Type InterfaceType => typeof(ISubjectEx);

        public SubjectExRef() : base(null)
        {
        }

        public SubjectExRef(IRequestTarget target) : base(target)
        {
        }

        public SubjectExRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public ISubjectEx_NoReply WithNoReply()
        {
            return this;
        }

        public SubjectExRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new SubjectExRef(Target, requestWaiter, Timeout);
        }

        public SubjectExRef WithTimeout(TimeSpan? timeout)
        {
            return new SubjectExRef(Target, RequestWaiter, timeout);
        }

        public Task MakeEvent(System.String eventName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubjectEx_PayloadTable.MakeEvent_Invoke { eventName = eventName }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task MakeEventEx(System.String eventName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubjectEx_PayloadTable.MakeEventEx_Invoke { eventName = eventName }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Subscribe(Akka.Interfaced.ISubjectExObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubjectEx_PayloadTable.Subscribe_Invoke { observer = (SubjectExObserver)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Unsubscribe(Akka.Interfaced.ISubjectExObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubjectEx_PayloadTable.Unsubscribe_Invoke { observer = (SubjectExObserver)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        void ISubjectEx_NoReply.MakeEvent(System.String eventName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubjectEx_PayloadTable.MakeEvent_Invoke { eventName = eventName }
            };
            SendRequest(requestMessage);
        }

        void ISubjectEx_NoReply.MakeEventEx(System.String eventName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubjectEx_PayloadTable.MakeEventEx_Invoke { eventName = eventName }
            };
            SendRequest(requestMessage);
        }

        void ISubjectEx_NoReply.Subscribe(Akka.Interfaced.ISubjectExObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubjectEx_PayloadTable.Subscribe_Invoke { observer = (SubjectExObserver)observer }
            };
            SendRequest(requestMessage);
        }

        void ISubjectEx_NoReply.Unsubscribe(Akka.Interfaced.ISubjectExObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISubjectEx_PayloadTable.Unsubscribe_Invoke { observer = (SubjectExObserver)observer }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(ISubjectEx))]
    public interface ISubjectExSync : IInterfacedActorSync
    {
        void MakeEvent(System.String eventName);
        void MakeEventEx(System.String eventName);
        void Subscribe(Akka.Interfaced.ISubjectExObserver observer);
        void Unsubscribe(Akka.Interfaced.ISubjectExObserver observer);
    }
}

#endregion
#region Akka.Interfaced.IWorker

namespace Akka.Interfaced
{
    [PayloadTable(typeof(IWorker), PayloadTableKind.Request)]
    public static class IWorker_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Atomic_Invoke), null },
                { typeof(Reentrant_Invoke), null },
            };
        }

        public class Atomic_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Int32 id;

            public Type GetInterfaceType()
            {
                return typeof(IWorker);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IWorker)__target).Atomic(id);
                return null;
            }
        }

        public class Reentrant_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Int32 id;

            public Type GetInterfaceType()
            {
                return typeof(IWorker);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IWorker)__target).Reentrant(id);
                return null;
            }
        }
    }

    public interface IWorker_NoReply
    {
        void Atomic(System.Int32 id);
        void Reentrant(System.Int32 id);
    }

    public class WorkerRef : InterfacedActorRef, IWorker, IWorker_NoReply
    {
        public override Type InterfaceType => typeof(IWorker);

        public WorkerRef() : base(null)
        {
        }

        public WorkerRef(IRequestTarget target) : base(target)
        {
        }

        public WorkerRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IWorker_NoReply WithNoReply()
        {
            return this;
        }

        public WorkerRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new WorkerRef(Target, requestWaiter, Timeout);
        }

        public WorkerRef WithTimeout(TimeSpan? timeout)
        {
            return new WorkerRef(Target, RequestWaiter, timeout);
        }

        public Task Atomic(System.Int32 id)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IWorker_PayloadTable.Atomic_Invoke { id = id }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Reentrant(System.Int32 id)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IWorker_PayloadTable.Reentrant_Invoke { id = id }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IWorker_NoReply.Atomic(System.Int32 id)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IWorker_PayloadTable.Atomic_Invoke { id = id }
            };
            SendRequest(requestMessage);
        }

        void IWorker_NoReply.Reentrant(System.Int32 id)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IWorker_PayloadTable.Reentrant_Invoke { id = id }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IWorker))]
    public interface IWorkerSync : IInterfacedActorSync
    {
        void Atomic(System.Int32 id);
        void Reentrant(System.Int32 id);
    }
}

#endregion
#region Akka.Interfaced.ISubject2Observer

namespace Akka.Interfaced
{
    [PayloadTable(typeof(ISubject2Observer), PayloadTableKind.Notification)]
    public static class ISubject2Observer_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(Event_Invoke),
                typeof(Event2_Invoke),
            };
        }

        public class Event_Invoke : IInterfacedPayload, IInvokable
        {
            public System.String eventName;

            public Type GetInterfaceType()
            {
                return typeof(ISubject2Observer);
            }

            public void Invoke(object __target)
            {
                ((ISubject2Observer)__target).Event(eventName);
            }
        }

        public class Event2_Invoke : IInterfacedPayload, IInvokable
        {
            public System.String eventName;

            public Type GetInterfaceType()
            {
                return typeof(ISubject2Observer);
            }

            public void Invoke(object __target)
            {
                ((ISubject2Observer)__target).Event2(eventName);
            }
        }
    }

    public class Subject2Observer : InterfacedObserver, ISubject2Observer
    {
        public Subject2Observer()
            : base(null, 0)
        {
        }

        public Subject2Observer(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public void Event(System.String eventName)
        {
            var payload = new ISubject2Observer_PayloadTable.Event_Invoke { eventName = eventName };
            Notify(payload);
        }

        public void Event2(System.String eventName)
        {
            var payload = new ISubject2Observer_PayloadTable.Event2_Invoke { eventName = eventName };
            Notify(payload);
        }
    }

    [AlternativeInterface(typeof(ISubject2Observer))]
    public interface ISubject2ObserverAsync : IInterfacedObserverSync
    {
        Task Event(System.String eventName);
        Task Event2(System.String eventName);
    }
}

#endregion
#region Akka.Interfaced.ISubjectExObserver

namespace Akka.Interfaced
{
    [PayloadTable(typeof(ISubjectExObserver), PayloadTableKind.Notification)]
    public static class ISubjectExObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(EventEx_Invoke),
            };
        }

        public class EventEx_Invoke : IInterfacedPayload, IInvokable
        {
            public System.String eventName;

            public Type GetInterfaceType()
            {
                return typeof(ISubjectExObserver);
            }

            public void Invoke(object __target)
            {
                ((ISubjectExObserver)__target).EventEx(eventName);
            }
        }
    }

    public class SubjectExObserver : InterfacedObserver, ISubjectExObserver
    {
        public SubjectExObserver()
            : base(null, 0)
        {
        }

        public SubjectExObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public void EventEx(System.String eventName)
        {
            var payload = new ISubjectExObserver_PayloadTable.EventEx_Invoke { eventName = eventName };
            Notify(payload);
        }

        public void Event(System.String eventName)
        {
            var payload = new ISubjectObserver_PayloadTable.Event_Invoke { eventName = eventName };
            Notify(payload);
        }
    }

    [AlternativeInterface(typeof(ISubjectExObserver))]
    public interface ISubjectExObserverAsync : ISubjectObserverAsync
    {
        Task EventEx(System.String eventName);
    }
}

#endregion
#region Akka.Interfaced.ISubjectObserver

namespace Akka.Interfaced
{
    [PayloadTable(typeof(ISubjectObserver), PayloadTableKind.Notification)]
    public static class ISubjectObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(Event_Invoke),
            };
        }

        public class Event_Invoke : IInterfacedPayload, IInvokable
        {
            public System.String eventName;

            public Type GetInterfaceType()
            {
                return typeof(ISubjectObserver);
            }

            public void Invoke(object __target)
            {
                ((ISubjectObserver)__target).Event(eventName);
            }
        }
    }

    public class SubjectObserver : InterfacedObserver, ISubjectObserver
    {
        public SubjectObserver()
            : base(null, 0)
        {
        }

        public SubjectObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public void Event(System.String eventName)
        {
            var payload = new ISubjectObserver_PayloadTable.Event_Invoke { eventName = eventName };
            Notify(payload);
        }
    }

    [AlternativeInterface(typeof(ISubjectObserver))]
    public interface ISubjectObserverAsync : IInterfacedObserverSync
    {
        Task Event(System.String eventName);
    }
}

#endregion
