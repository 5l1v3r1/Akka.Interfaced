// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Actor;
using Akka.Interfaced;

#region Akka.Interfaced.Tests.IOverloaded

namespace Akka.Interfaced.Tests
{
    [MessageTableForInterfacedActor(typeof(IOverloaded))]
    public static class IOverloaded__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(IOverloaded__Min__Invoke), typeof(IOverloaded__Min__Return)},
                {typeof(IOverloaded__Min_2__Invoke), typeof(IOverloaded__Min_2__Return)},
                {typeof(IOverloaded__Min_3__Invoke), typeof(IOverloaded__Min_3__Return)},
            };
        }
    }

    public class IOverloaded__Min__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 a;
        public System.Int32 b;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IOverloaded)target).Min(a, b);
            return (IValueGetable)(new IOverloaded__Min__Return { v = __v });
        }
    }

    public class IOverloaded__Min__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public object Value { get { return v; } }
    }

    public class IOverloaded__Min_2__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 a;
        public System.Int32 b;
        public System.Int32 c;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IOverloaded)target).Min(a, b, c);
            return (IValueGetable)(new IOverloaded__Min_2__Return { v = __v });
        }
    }

    public class IOverloaded__Min_2__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public object Value { get { return v; } }
    }

    public class IOverloaded__Min_3__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32[] nums;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IOverloaded)target).Min(nums);
            return (IValueGetable)(new IOverloaded__Min_3__Return { v = __v });
        }
    }

    public class IOverloaded__Min_3__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public object Value { get { return v; } }
    }

    public class OverloadedRef : InterfacedActorRef, IOverloaded
    {
        public OverloadedRef(IActorRef actor)
            : base(actor)
        {
        }

        public OverloadedRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public OverloadedRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new OverloadedRef(Actor, requestWaiter, Timeout);
        }

        public OverloadedRef WithTimeout(TimeSpan? timeout)
        {
            return new OverloadedRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Int32> Min(System.Int32 a, System.Int32 b)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IOverloaded__Min__Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> Min(System.Int32 a, System.Int32 b, System.Int32 c)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IOverloaded__Min_2__Invoke { a = a, b = b, c = c }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> Min(params System.Int32[] nums)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IOverloaded__Min_3__Invoke { nums = nums }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }
    }
}

#endregion

#region Akka.Interfaced.Tests.ISimple

namespace Akka.Interfaced.Tests
{
    [MessageTableForInterfacedActor(typeof(ISimple))]
    public static class ISimple__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(ISimple__Call__Invoke), null},
                {typeof(ISimple__CallWithParameter__Invoke), null},
                {typeof(ISimple__CallWithReturn__Invoke), typeof(ISimple__CallWithReturn__Return)},
                {typeof(ISimple__CallWithParameterAndReturn__Invoke), typeof(ISimple__CallWithParameterAndReturn__Return)},
                {typeof(ISimple__ThrowException__Invoke), typeof(ISimple__ThrowException__Return)},
            };
        }
    }

    public class ISimple__Call__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public Type GetInterfaceType() { return typeof(ISimple); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((ISimple)target).Call();
            return null;
        }
    }

    public class ISimple__CallWithParameter__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 value;

        public Type GetInterfaceType() { return typeof(ISimple); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((ISimple)target).CallWithParameter(value);
            return null;
        }
    }

    public class ISimple__CallWithReturn__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public Type GetInterfaceType() { return typeof(ISimple); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((ISimple)target).CallWithReturn();
            return (IValueGetable)(new ISimple__CallWithReturn__Return { v = __v });
        }
    }

    public class ISimple__CallWithReturn__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(ISimple); }

        public object Value { get { return v; } }
    }

    public class ISimple__CallWithParameterAndReturn__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 value;

        public Type GetInterfaceType() { return typeof(ISimple); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((ISimple)target).CallWithParameterAndReturn(value);
            return (IValueGetable)(new ISimple__CallWithParameterAndReturn__Return { v = __v });
        }
    }

    public class ISimple__CallWithParameterAndReturn__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(ISimple); }

        public object Value { get { return v; } }
    }

    public class ISimple__ThrowException__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Boolean throwException;

        public Type GetInterfaceType() { return typeof(ISimple); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((ISimple)target).ThrowException(throwException);
            return (IValueGetable)(new ISimple__ThrowException__Return { v = __v });
        }
    }

    public class ISimple__ThrowException__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(ISimple); }

        public object Value { get { return v; } }
    }

    public class SimpleRef : InterfacedActorRef, ISimple
    {
        public SimpleRef(IActorRef actor)
            : base(actor)
        {
        }

        public SimpleRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public SimpleRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new SimpleRef(Actor, requestWaiter, Timeout);
        }

        public SimpleRef WithTimeout(TimeSpan? timeout)
        {
            return new SimpleRef(Actor, RequestWaiter, timeout);
        }

        public Task Call()
        {
            var requestMessage = new RequestMessage
            {
                Message = new ISimple__Call__Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task CallWithParameter(System.Int32 value)
        {
            var requestMessage = new RequestMessage
            {
                Message = new ISimple__CallWithParameter__Invoke { value = value }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Int32> CallWithReturn()
        {
            var requestMessage = new RequestMessage
            {
                Message = new ISimple__CallWithReturn__Invoke {  }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> CallWithParameterAndReturn(System.Int32 value)
        {
            var requestMessage = new RequestMessage
            {
                Message = new ISimple__CallWithParameterAndReturn__Invoke { value = value }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> ThrowException(System.Boolean throwException)
        {
            var requestMessage = new RequestMessage
            {
                Message = new ISimple__ThrowException__Invoke { throwException = throwException }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }
    }
}

#endregion

#region Akka.Interfaced.Tests.IWorker

namespace Akka.Interfaced.Tests
{
    [MessageTableForInterfacedActor(typeof(IWorker))]
    public static class IWorker__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(IWorker__Atomic__Invoke), null},
                {typeof(IWorker__Reentrant__Invoke), null},
            };
        }
    }

    public class IWorker__Atomic__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 id;

        public Type GetInterfaceType() { return typeof(IWorker); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IWorker)target).Atomic(id);
            return null;
        }
    }

    public class IWorker__Reentrant__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 id;

        public Type GetInterfaceType() { return typeof(IWorker); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IWorker)target).Reentrant(id);
            return null;
        }
    }

    public class WorkerRef : InterfacedActorRef, IWorker
    {
        public WorkerRef(IActorRef actor)
            : base(actor)
        {
        }

        public WorkerRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public WorkerRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new WorkerRef(Actor, requestWaiter, Timeout);
        }

        public WorkerRef WithTimeout(TimeSpan? timeout)
        {
            return new WorkerRef(Actor, RequestWaiter, timeout);
        }

        public Task Atomic(System.Int32 id)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IWorker__Atomic__Invoke { id = id }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Reentrant(System.Int32 id)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IWorker__Reentrant__Invoke { id = id }
            };
            return SendRequestAndWait(requestMessage);
        }
    }
}

#endregion
