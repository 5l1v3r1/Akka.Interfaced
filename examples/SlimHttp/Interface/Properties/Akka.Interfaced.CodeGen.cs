// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Actor;
using Akka.Interfaced;

#region SlimHttp.Interface.ICalculator

namespace SlimHttp.Interface
{
    [MessageTableForInterfacedActor(typeof(ICalculator))]
    public static class ICalculator__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(ICalculator__Concat__Invoke), typeof(ICalculator__Concat__Return)},
                {typeof(ICalculator__Sum__Invoke), typeof(ICalculator__Sum__Return)},
            };
        }
    }

    public class ICalculator__Concat__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.String a;
        public System.String b;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((ICalculator)target).Concat(a, b);
            return (IValueGetable)(new ICalculator__Concat__Return { v = __v });
        }
    }

    public class ICalculator__Concat__Return : IInterfacedMessage, IValueGetable
    {
        public System.String v;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public object Value { get { return v; } }
    }

    public class ICalculator__Sum__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 a;
        public System.Int32 b;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((ICalculator)target).Sum(a, b);
            return (IValueGetable)(new ICalculator__Sum__Return { v = __v });
        }
    }

    public class ICalculator__Sum__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public object Value { get { return v; } }
    }

    public class CalculatorRef : InterfacedActorRef, ICalculator
    {
        public CalculatorRef(IActorRef actor)
            : base(actor)
        {
        }

        public CalculatorRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public CalculatorRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new CalculatorRef(Actor, requestWaiter, Timeout);
        }

        public CalculatorRef WithTimeout(TimeSpan? timeout)
        {
            return new CalculatorRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.String> Concat(System.String a, System.String b)
        {
            var requestMessage = new RequestMessage
            {
                Message = new ICalculator__Concat__Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task<System.Int32> Sum(System.Int32 a, System.Int32 b)
        {
            var requestMessage = new RequestMessage
            {
                Message = new ICalculator__Sum__Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }
    }
}

#endregion

#region SlimHttp.Interface.ICounter

namespace SlimHttp.Interface
{
    [MessageTableForInterfacedActor(typeof(ICounter))]
    public static class ICounter__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(ICounter__IncCounter__Invoke), null},
                {typeof(ICounter__GetCounter__Invoke), typeof(ICounter__GetCounter__Return)},
            };
        }
    }

    public class ICounter__IncCounter__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 delta;

        public Type GetInterfaceType() { return typeof(ICounter); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((ICounter)target).IncCounter(delta);
            return null;
        }
    }

    public class ICounter__GetCounter__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public Type GetInterfaceType() { return typeof(ICounter); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((ICounter)target).GetCounter();
            return (IValueGetable)(new ICounter__GetCounter__Return { v = __v });
        }
    }

    public class ICounter__GetCounter__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(ICounter); }

        public object Value { get { return v; } }
    }

    public class CounterRef : InterfacedActorRef, ICounter
    {
        public CounterRef(IActorRef actor)
            : base(actor)
        {
        }

        public CounterRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public CounterRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new CounterRef(Actor, requestWaiter, Timeout);
        }

        public CounterRef WithTimeout(TimeSpan? timeout)
        {
            return new CounterRef(Actor, RequestWaiter, timeout);
        }

        public Task IncCounter(System.Int32 delta)
        {
            var requestMessage = new RequestMessage
            {
                Message = new ICounter__IncCounter__Invoke { delta = delta }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Int32> GetCounter()
        {
            var requestMessage = new RequestMessage
            {
                Message = new ICounter__GetCounter__Invoke {  }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }
    }
}

#endregion

#region SlimHttp.Interface.IPedantic

namespace SlimHttp.Interface
{
    [MessageTableForInterfacedActor(typeof(IPedantic))]
    public static class IPedantic__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(IPedantic__TestCall__Invoke), null},
                {typeof(IPedantic__TestOptional__Invoke), typeof(IPedantic__TestOptional__Return)},
                {typeof(IPedantic__TestTuple__Invoke), typeof(IPedantic__TestTuple__Return)},
                {typeof(IPedantic__TestParams__Invoke), typeof(IPedantic__TestParams__Return)},
                {typeof(IPedantic__TestPassClass__Invoke), typeof(IPedantic__TestPassClass__Return)},
                {typeof(IPedantic__TestReturnClass__Invoke), typeof(IPedantic__TestReturnClass__Return)},
            };
        }
    }

    public class IPedantic__TestCall__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public Type GetInterfaceType() { return typeof(IPedantic); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IPedantic)target).TestCall();
            return null;
        }
    }

    public class IPedantic__TestOptional__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Nullable<System.Int32> value;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IPedantic)target).TestOptional(value);
            return (IValueGetable)(new IPedantic__TestOptional__Return { v = (System.Nullable<System.Int32>)__v });
        }
    }

    public class IPedantic__TestOptional__Return : IInterfacedMessage, IValueGetable
    {
        public System.Nullable<System.Int32> v;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public object Value { get { return v; } }
    }

    public class IPedantic__TestTuple__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Tuple<System.Int32, System.String> value;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IPedantic)target).TestTuple(value);
            return (IValueGetable)(new IPedantic__TestTuple__Return { v = (System.Tuple<System.Int32, System.String>)__v });
        }
    }

    public class IPedantic__TestTuple__Return : IInterfacedMessage, IValueGetable
    {
        public System.Tuple<System.Int32, System.String> v;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public object Value { get { return v; } }
    }

    public class IPedantic__TestParams__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32[] values;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IPedantic)target).TestParams(values);
            return (IValueGetable)(new IPedantic__TestParams__Return { v = __v });
        }
    }

    public class IPedantic__TestParams__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32[] v;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public object Value { get { return v; } }
    }

    public class IPedantic__TestPassClass__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public SlimHttp.Interface.TestParam param;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IPedantic)target).TestPassClass(param);
            return (IValueGetable)(new IPedantic__TestPassClass__Return { v = __v });
        }
    }

    public class IPedantic__TestPassClass__Return : IInterfacedMessage, IValueGetable
    {
        public System.String v;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public object Value { get { return v; } }
    }

    public class IPedantic__TestReturnClass__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 value;
        public System.Int32 offset;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IPedantic)target).TestReturnClass(value, offset);
            return (IValueGetable)(new IPedantic__TestReturnClass__Return { v = __v });
        }
    }

    public class IPedantic__TestReturnClass__Return : IInterfacedMessage, IValueGetable
    {
        public SlimHttp.Interface.TestResult v;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public object Value { get { return v; } }
    }

    public class PedanticRef : InterfacedActorRef, IPedantic
    {
        public PedanticRef(IActorRef actor)
            : base(actor)
        {
        }

        public PedanticRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public PedanticRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new PedanticRef(Actor, requestWaiter, Timeout);
        }

        public PedanticRef WithTimeout(TimeSpan? timeout)
        {
            return new PedanticRef(Actor, RequestWaiter, timeout);
        }

        public Task TestCall()
        {
            var requestMessage = new RequestMessage
            {
                Message = new IPedantic__TestCall__Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Nullable<System.Int32>> TestOptional(System.Nullable<System.Int32> value)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IPedantic__TestOptional__Invoke { value = (System.Nullable<System.Int32>)value }
            };
            return SendRequestAndReceive<System.Nullable<System.Int32>>(requestMessage);
        }

        public Task<System.Tuple<System.Int32, System.String>> TestTuple(System.Tuple<System.Int32, System.String> value)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IPedantic__TestTuple__Invoke { value = (System.Tuple<System.Int32, System.String>)value }
            };
            return SendRequestAndReceive<System.Tuple<System.Int32, System.String>>(requestMessage);
        }

        public Task<System.Int32[]> TestParams(params System.Int32[] values)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IPedantic__TestParams__Invoke { values = values }
            };
            return SendRequestAndReceive<System.Int32[]>(requestMessage);
        }

        public Task<System.String> TestPassClass(SlimHttp.Interface.TestParam param)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IPedantic__TestPassClass__Invoke { param = param }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task<SlimHttp.Interface.TestResult> TestReturnClass(System.Int32 value, System.Int32 offset)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IPedantic__TestReturnClass__Invoke { value = value, offset = offset }
            };
            return SendRequestAndReceive<SlimHttp.Interface.TestResult>(requestMessage);
        }
    }
}

#endregion
