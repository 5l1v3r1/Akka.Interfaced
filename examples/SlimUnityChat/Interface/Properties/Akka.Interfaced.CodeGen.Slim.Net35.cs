// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using ProtoBuf;
using TypeAlias;

#region SlimUnityChat.Interface.IOccupant

namespace SlimUnityChat.Interface
{
    [ProtoContract, TypeAlias]
    public class IOccupant__Say__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.String msg;
        [ProtoMember(2)] public System.String senderUserId;

        public Type GetInterfaceType() { return typeof(IOccupant); }
    }

    [ProtoContract, TypeAlias]
    public class IOccupant__GetHistory__Invoke : IInterfacedMessage
    {
        public Type GetInterfaceType() { return typeof(IOccupant); }
    }

    [ProtoContract, TypeAlias]
    public class IOccupant__GetHistory__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.Collections.Generic.List<SlimUnityChat.Interface.ChatItem> v;

        public Type GetInterfaceType() { return typeof(IOccupant); }

        public object Value { get { return v; } }
    }

    [ProtoContract, TypeAlias]
    public class IOccupant__Invite__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.String targetUserId;
        [ProtoMember(2)] public System.String senderUserId;

        public Type GetInterfaceType() { return typeof(IOccupant); }
    }

    public class OccupantRef : InterfacedSlimActorRef
    {
        public OccupantRef(ISlimActorRef actor, ISlimRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public OccupantRef WithRequestWaiter(ISlimRequestWaiter requestWaiter)
        {
            return new OccupantRef(Actor, requestWaiter, Timeout);
        }

        public OccupantRef WithTimeout(TimeSpan? timeout)
        {
            return new OccupantRef(Actor, RequestWaiter, timeout);
        }

        public Task Say(System.String msg, System.String senderUserId = null)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IOccupant__Say__Invoke { msg = msg, senderUserId = senderUserId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Collections.Generic.List<SlimUnityChat.Interface.ChatItem>> GetHistory()
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IOccupant__GetHistory__Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<SlimUnityChat.Interface.ChatItem>>(requestMessage);
        }

        public Task Invite(System.String targetUserId, System.String senderUserId = null)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IOccupant__Invite__Invoke { targetUserId = targetUserId, senderUserId = senderUserId }
            };
            return SendRequestAndWait(requestMessage);
        }
    }
}

#endregion

#region SlimUnityChat.Interface.IUser

namespace SlimUnityChat.Interface
{
    [ProtoContract, TypeAlias]
    public class IUser__GetId__Invoke : IInterfacedMessage
    {
        public Type GetInterfaceType() { return typeof(IUser); }
    }

    [ProtoContract, TypeAlias]
    public class IUser__GetId__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.String v;

        public Type GetInterfaceType() { return typeof(IUser); }

        public object Value { get { return v; } }
    }

    [ProtoContract, TypeAlias]
    public class IUser__GetRoomList__Invoke : IInterfacedMessage
    {
        public Type GetInterfaceType() { return typeof(IUser); }
    }

    [ProtoContract, TypeAlias]
    public class IUser__GetRoomList__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.Collections.Generic.List<System.String> v;

        public Type GetInterfaceType() { return typeof(IUser); }

        public object Value { get { return v; } }
    }

    [ProtoContract, TypeAlias]
    public class IUser__EnterRoom__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.String name;
        [ProtoMember(2)] public System.Int32 observerId;

        public Type GetInterfaceType() { return typeof(IUser); }
    }

    [ProtoContract, TypeAlias]
    public class IUser__EnterRoom__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.Tuple<System.Int32, SlimUnityChat.Interface.RoomInfo> v;

        public Type GetInterfaceType() { return typeof(IUser); }

        public object Value { get { return v; } }
    }

    [ProtoContract, TypeAlias]
    public class IUser__ExitFromRoom__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.String name;

        public Type GetInterfaceType() { return typeof(IUser); }
    }

    [ProtoContract, TypeAlias]
    public class IUser__Whisper__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.String targetUserId;
        [ProtoMember(2)] public System.String message;

        public Type GetInterfaceType() { return typeof(IUser); }
    }

    public class UserRef : InterfacedSlimActorRef
    {
        public UserRef(ISlimActorRef actor, ISlimRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public UserRef WithRequestWaiter(ISlimRequestWaiter requestWaiter)
        {
            return new UserRef(Actor, requestWaiter, Timeout);
        }

        public UserRef WithTimeout(TimeSpan? timeout)
        {
            return new UserRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.String> GetId()
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IUser__GetId__Invoke {  }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task<System.Collections.Generic.List<System.String>> GetRoomList()
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IUser__GetRoomList__Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<System.String>>(requestMessage);
        }

        public Task<System.Tuple<System.Int32, SlimUnityChat.Interface.RoomInfo>> EnterRoom(System.String name, System.Int32 observerId)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IUser__EnterRoom__Invoke { name = name, observerId = observerId }
            };
            return SendRequestAndReceive<System.Tuple<System.Int32, SlimUnityChat.Interface.RoomInfo>>(requestMessage);
        }

        public Task ExitFromRoom(System.String name)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IUser__ExitFromRoom__Invoke { name = name }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Whisper(System.String targetUserId, System.String message)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IUser__Whisper__Invoke { targetUserId = targetUserId, message = message }
            };
            return SendRequestAndWait(requestMessage);
        }
    }
}

#endregion

#region SlimUnityChat.Interface.IUserLogin

namespace SlimUnityChat.Interface
{
    [ProtoContract, TypeAlias]
    public class IUserLogin__Login__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.String id;
        [ProtoMember(2)] public System.String password;
        [ProtoMember(3)] public System.Int32 observerId;

        public Type GetInterfaceType() { return typeof(IUserLogin); }
    }

    [ProtoContract, TypeAlias]
    public class IUserLogin__Login__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.Int32 v;

        public Type GetInterfaceType() { return typeof(IUserLogin); }

        public object Value { get { return v; } }
    }

    public class UserLoginRef : InterfacedSlimActorRef
    {
        public UserLoginRef(ISlimActorRef actor, ISlimRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public UserLoginRef WithRequestWaiter(ISlimRequestWaiter requestWaiter)
        {
            return new UserLoginRef(Actor, requestWaiter, Timeout);
        }

        public UserLoginRef WithTimeout(TimeSpan? timeout)
        {
            return new UserLoginRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Int32> Login(System.String id, System.String password, System.Int32 observerId)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IUserLogin__Login__Invoke { id = id, password = password, observerId = observerId }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }
    }
}

#endregion

#region SlimUnityChat.Interface.IUserMessasing

namespace SlimUnityChat.Interface
{
    [ProtoContract, TypeAlias]
    public class IUserMessasing__Whisper__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public SlimUnityChat.Interface.ChatItem chatItem;

        public Type GetInterfaceType() { return typeof(IUserMessasing); }
    }

    [ProtoContract, TypeAlias]
    public class IUserMessasing__Invite__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.String invitorUserId;
        [ProtoMember(2)] public System.String roomName;

        public Type GetInterfaceType() { return typeof(IUserMessasing); }
    }

    public class UserMessasingRef : InterfacedSlimActorRef
    {
        public UserMessasingRef(ISlimActorRef actor, ISlimRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public UserMessasingRef WithRequestWaiter(ISlimRequestWaiter requestWaiter)
        {
            return new UserMessasingRef(Actor, requestWaiter, Timeout);
        }

        public UserMessasingRef WithTimeout(TimeSpan? timeout)
        {
            return new UserMessasingRef(Actor, RequestWaiter, timeout);
        }

        public Task Whisper(SlimUnityChat.Interface.ChatItem chatItem)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IUserMessasing__Whisper__Invoke { chatItem = chatItem }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Invite(System.String invitorUserId, System.String roomName)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IUserMessasing__Invite__Invoke { invitorUserId = invitorUserId, roomName = roomName }
            };
            return SendRequestAndWait(requestMessage);
        }
    }
}

#endregion

#region SlimUnityChat.Interface.IRoomObserver

namespace SlimUnityChat.Interface
{
    [ProtoContract, TypeAlias]
    public class IRoomObserver__Enter__Invoke : IInvokable
    {
        [ProtoMember(1)] public System.String userId;

        public void Invoke(object target)
        {
            ((IRoomObserver)target).Enter(userId);
        }
    }

    [ProtoContract, TypeAlias]
    public class IRoomObserver__Exit__Invoke : IInvokable
    {
        [ProtoMember(1)] public System.String userId;

        public void Invoke(object target)
        {
            ((IRoomObserver)target).Exit(userId);
        }
    }

    [ProtoContract, TypeAlias]
    public class IRoomObserver__Say__Invoke : IInvokable
    {
        [ProtoMember(1)] public SlimUnityChat.Interface.ChatItem chatItem;

        public void Invoke(object target)
        {
            ((IRoomObserver)target).Say(chatItem);
        }
    }
}

#endregion

#region SlimUnityChat.Interface.IUserEventObserver

namespace SlimUnityChat.Interface
{
    [ProtoContract, TypeAlias]
    public class IUserEventObserver__Whisper__Invoke : IInvokable
    {
        [ProtoMember(1)] public SlimUnityChat.Interface.ChatItem chatItem;

        public void Invoke(object target)
        {
            ((IUserEventObserver)target).Whisper(chatItem);
        }
    }

    [ProtoContract, TypeAlias]
    public class IUserEventObserver__Invite__Invoke : IInvokable
    {
        [ProtoMember(1)] public System.String invitorUserId;
        [ProtoMember(2)] public System.String roomName;

        public void Invoke(object target)
        {
            ((IUserEventObserver)target).Invite(invitorUserId, roomName);
        }
    }
}

#endregion
