// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using ProtoBuf;
using TypeAlias;

#region SlimUnity.Interface.ICalculator

namespace SlimUnity.Interface
{
    [ProtoContract, TypeAlias]
    public class ICalculator__Concat__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.String a;
        [ProtoMember(2)] public System.String b;

        public Type GetInterfaceType() { return typeof(ICalculator); }
    }

    [ProtoContract, TypeAlias]
    public class ICalculator__Concat__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.String v;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public object Value { get { return v; } }
    }

    [ProtoContract, TypeAlias]
    public class ICalculator__Sum__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.Int32 a;
        [ProtoMember(2)] public System.Int32 b;

        public Type GetInterfaceType() { return typeof(ICalculator); }
    }

    [ProtoContract, TypeAlias]
    public class ICalculator__Sum__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.Int32 v;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public object Value { get { return v; } }
    }

    [ProtoContract, TypeAlias]
    public class ICalculator__Sum_2__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.Tuple<System.Int32, System.Int32> v;

        public Type GetInterfaceType() { return typeof(ICalculator); }
    }

    [ProtoContract, TypeAlias]
    public class ICalculator__Sum_2__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.Int32 v;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public object Value { get { return v; } }
    }

    public class CalculatorRef : InterfacedSlimActorRef
    {
        public CalculatorRef(ISlimActorRef actor, ISlimRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public CalculatorRef WithRequestWaiter(ISlimRequestWaiter requestWaiter)
        {
            return new CalculatorRef(Actor, requestWaiter, Timeout);
        }

        public CalculatorRef WithTimeout(TimeSpan? timeout)
        {
            return new CalculatorRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.String> Concat(System.String a, System.String b)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new ICalculator__Concat__Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task<System.Int32> Sum(System.Int32 a, System.Int32 b)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new ICalculator__Sum__Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> Sum(System.Tuple<System.Int32, System.Int32> v)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new ICalculator__Sum_2__Invoke { v = (System.Tuple<System.Int32, System.Int32>)v }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }
    }
}

#endregion

#region SlimUnity.Interface.ICounter

namespace SlimUnity.Interface
{
    [ProtoContract, TypeAlias]
    public class ICounter__IncCounter__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.Int32 delta;

        public Type GetInterfaceType() { return typeof(ICounter); }
    }

    [ProtoContract, TypeAlias]
    public class ICounter__GetCounter__Invoke : IInterfacedMessage
    {
        public Type GetInterfaceType() { return typeof(ICounter); }
    }

    [ProtoContract, TypeAlias]
    public class ICounter__GetCounter__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.Int32 v;

        public Type GetInterfaceType() { return typeof(ICounter); }

        public object Value { get { return v; } }
    }

    public class CounterRef : InterfacedSlimActorRef
    {
        public CounterRef(ISlimActorRef actor, ISlimRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public CounterRef WithRequestWaiter(ISlimRequestWaiter requestWaiter)
        {
            return new CounterRef(Actor, requestWaiter, Timeout);
        }

        public CounterRef WithTimeout(TimeSpan? timeout)
        {
            return new CounterRef(Actor, RequestWaiter, timeout);
        }

        public Task IncCounter(System.Int32 delta)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new ICounter__IncCounter__Invoke { delta = delta }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Int32> GetCounter()
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new ICounter__GetCounter__Invoke {  }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }
    }
}

#endregion

#region SlimUnity.Interface.IPedantic

namespace SlimUnity.Interface
{
    [ProtoContract, TypeAlias]
    public class IPedantic__TestCall__Invoke : IInterfacedMessage
    {
        public Type GetInterfaceType() { return typeof(IPedantic); }
    }

    [ProtoContract, TypeAlias]
    public class IPedantic__TestOptional__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.Nullable<System.Int32> value;

        public Type GetInterfaceType() { return typeof(IPedantic); }
    }

    [ProtoContract, TypeAlias]
    public class IPedantic__TestOptional__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.Nullable<System.Int32> v;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public object Value { get { return v; } }
    }

    [ProtoContract, TypeAlias]
    public class IPedantic__TestTuple__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.Tuple<System.Int32, System.String> value;

        public Type GetInterfaceType() { return typeof(IPedantic); }
    }

    [ProtoContract, TypeAlias]
    public class IPedantic__TestTuple__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.Tuple<System.Int32, System.String> v;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public object Value { get { return v; } }
    }

    [ProtoContract, TypeAlias]
    public class IPedantic__TestParams__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.Int32[] values;

        public Type GetInterfaceType() { return typeof(IPedantic); }
    }

    [ProtoContract, TypeAlias]
    public class IPedantic__TestParams__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.Int32[] v;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public object Value { get { return v; } }
    }

    [ProtoContract, TypeAlias]
    public class IPedantic__TestPassClass__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public SlimUnity.Interface.TestParam param;

        public Type GetInterfaceType() { return typeof(IPedantic); }
    }

    [ProtoContract, TypeAlias]
    public class IPedantic__TestPassClass__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public System.String v;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public object Value { get { return v; } }
    }

    [ProtoContract, TypeAlias]
    public class IPedantic__TestReturnClass__Invoke : IInterfacedMessage
    {
        [ProtoMember(1)] public System.Int32 value;
        [ProtoMember(2)] public System.Int32 offset;

        public Type GetInterfaceType() { return typeof(IPedantic); }
    }

    [ProtoContract, TypeAlias]
    public class IPedantic__TestReturnClass__Return : IInterfacedMessage, IValueGetable
    {
        [ProtoMember(1)] public SlimUnity.Interface.TestResult v;

        public Type GetInterfaceType() { return typeof(IPedantic); }

        public object Value { get { return v; } }
    }

    public class PedanticRef : InterfacedSlimActorRef
    {
        public PedanticRef(ISlimActorRef actor, ISlimRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public PedanticRef WithRequestWaiter(ISlimRequestWaiter requestWaiter)
        {
            return new PedanticRef(Actor, requestWaiter, Timeout);
        }

        public PedanticRef WithTimeout(TimeSpan? timeout)
        {
            return new PedanticRef(Actor, RequestWaiter, timeout);
        }

        public Task TestCall()
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IPedantic__TestCall__Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Nullable<System.Int32>> TestOptional(System.Nullable<System.Int32> value)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IPedantic__TestOptional__Invoke { value = (System.Nullable<System.Int32>)value }
            };
            return SendRequestAndReceive<System.Nullable<System.Int32>>(requestMessage);
        }

        public Task<System.Tuple<System.Int32, System.String>> TestTuple(System.Tuple<System.Int32, System.String> value)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IPedantic__TestTuple__Invoke { value = (System.Tuple<System.Int32, System.String>)value }
            };
            return SendRequestAndReceive<System.Tuple<System.Int32, System.String>>(requestMessage);
        }

        public Task<System.Int32[]> TestParams(params System.Int32[] values)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IPedantic__TestParams__Invoke { values = values }
            };
            return SendRequestAndReceive<System.Int32[]>(requestMessage);
        }

        public Task<System.String> TestPassClass(SlimUnity.Interface.TestParam param)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IPedantic__TestPassClass__Invoke { param = param }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task<SlimUnity.Interface.TestResult> TestReturnClass(System.Int32 value, System.Int32 offset)
        {
            var requestMessage = new SlimRequestMessage
            {
                Message = new IPedantic__TestReturnClass__Invoke { value = value, offset = offset }
            };
            return SendRequestAndReceive<SlimUnity.Interface.TestResult>(requestMessage);
        }
    }
}

#endregion
