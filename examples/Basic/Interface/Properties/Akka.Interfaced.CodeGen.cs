// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Actor;
using Akka.Interfaced;

#region Basic.Interface.ICalculator

namespace Basic.Interface
{
    [MessageTableForInterfacedActor(typeof(ICalculator))]
    public static class ICalculator__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(ICalculator__Concat__Invoke), typeof(ICalculator__Concat__Return)},
                {typeof(ICalculator__Sum__Invoke), typeof(ICalculator__Sum__Return)},
            };
        }
    }

    public class ICalculator__Concat__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.String a;
        public System.String b;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((ICalculator)target).Concat(a, b);
            return (IValueGetable)(new ICalculator__Concat__Return { v = __v });
        }
    }

    public class ICalculator__Concat__Return : IInterfacedMessage, IValueGetable
    {
        public System.String v;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public object Value { get { return v; } }
    }

    public class ICalculator__Sum__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 a;
        public System.Int32 b;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((ICalculator)target).Sum(a, b);
            return (IValueGetable)(new ICalculator__Sum__Return { v = __v });
        }
    }

    public class ICalculator__Sum__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(ICalculator); }

        public object Value { get { return v; } }
    }

    public class CalculatorRef : InterfacedActorRef, ICalculator
    {
        public CalculatorRef(IActorRef actor)
            : base(actor)
        {
        }

        public CalculatorRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public CalculatorRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new CalculatorRef(Actor, requestWaiter, Timeout);
        }

        public CalculatorRef WithTimeout(TimeSpan? timeout)
        {
            return new CalculatorRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.String> Concat(System.String a, System.String b)
        {
            var requestMessage = new RequestMessage
            {
                Message = new ICalculator__Concat__Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task<System.Int32> Sum(System.Int32 a, System.Int32 b)
        {
            var requestMessage = new RequestMessage
            {
                Message = new ICalculator__Sum__Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }
    }
}

#endregion

#region Basic.Interface.ICounter

namespace Basic.Interface
{
    [MessageTableForInterfacedActor(typeof(ICounter))]
    public static class ICounter__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(ICounter__IncCounter__Invoke), null},
                {typeof(ICounter__GetCounter__Invoke), typeof(ICounter__GetCounter__Return)},
            };
        }
    }

    public class ICounter__IncCounter__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 delta;

        public Type GetInterfaceType() { return typeof(ICounter); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((ICounter)target).IncCounter(delta);
            return null;
        }
    }

    public class ICounter__GetCounter__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public Type GetInterfaceType() { return typeof(ICounter); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((ICounter)target).GetCounter();
            return (IValueGetable)(new ICounter__GetCounter__Return { v = __v });
        }
    }

    public class ICounter__GetCounter__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(ICounter); }

        public object Value { get { return v; } }
    }

    public class CounterRef : InterfacedActorRef, ICounter
    {
        public CounterRef(IActorRef actor)
            : base(actor)
        {
        }

        public CounterRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public CounterRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new CounterRef(Actor, requestWaiter, Timeout);
        }

        public CounterRef WithTimeout(TimeSpan? timeout)
        {
            return new CounterRef(Actor, RequestWaiter, timeout);
        }

        public Task IncCounter(System.Int32 delta)
        {
            var requestMessage = new RequestMessage
            {
                Message = new ICounter__IncCounter__Invoke { delta = delta }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Int32> GetCounter()
        {
            var requestMessage = new RequestMessage
            {
                Message = new ICounter__GetCounter__Invoke {  }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }
    }
}

#endregion

#region Basic.Interface.IEventGenerator

namespace Basic.Interface
{
    [MessageTableForInterfacedActor(typeof(IEventGenerator))]
    public static class IEventGenerator__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(IEventGenerator__Subscribe__Invoke), null},
                {typeof(IEventGenerator__Unsubscribe__Invoke), null},
                {typeof(IEventGenerator__Buy__Invoke), null},
                {typeof(IEventGenerator__Sell__Invoke), null},
            };
        }
    }

    public class IEventGenerator__Subscribe__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public Basic.Interface.EventObserver observer;

        public Type GetInterfaceType() { return typeof(IEventGenerator); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IEventGenerator)target).Subscribe(observer);
            return null;
        }
    }

    public class IEventGenerator__Unsubscribe__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public Basic.Interface.EventObserver observer;

        public Type GetInterfaceType() { return typeof(IEventGenerator); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IEventGenerator)target).Unsubscribe(observer);
            return null;
        }
    }

    public class IEventGenerator__Buy__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.String name;
        public System.Int32 price;

        public Type GetInterfaceType() { return typeof(IEventGenerator); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IEventGenerator)target).Buy(name, price);
            return null;
        }
    }

    public class IEventGenerator__Sell__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.String name;
        public System.Int32 price;

        public Type GetInterfaceType() { return typeof(IEventGenerator); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IEventGenerator)target).Sell(name, price);
            return null;
        }
    }

    public class EventGeneratorRef : InterfacedActorRef, IEventGenerator
    {
        public EventGeneratorRef(IActorRef actor)
            : base(actor)
        {
        }

        public EventGeneratorRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public EventGeneratorRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new EventGeneratorRef(Actor, requestWaiter, Timeout);
        }

        public EventGeneratorRef WithTimeout(TimeSpan? timeout)
        {
            return new EventGeneratorRef(Actor, RequestWaiter, timeout);
        }

        public Task Subscribe(Basic.Interface.IEventObserver observer)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IEventGenerator__Subscribe__Invoke { observer = (Basic.Interface.EventObserver)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Unsubscribe(Basic.Interface.IEventObserver observer)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IEventGenerator__Unsubscribe__Invoke { observer = (Basic.Interface.EventObserver)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Buy(System.String name, System.Int32 price)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IEventGenerator__Buy__Invoke { name = name, price = price }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Sell(System.String name, System.Int32 price)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IEventGenerator__Sell__Invoke { name = name, price = price }
            };
            return SendRequestAndWait(requestMessage);
        }
    }
}

#endregion

#region Basic.Interface.IOverloaded

namespace Basic.Interface
{
    [MessageTableForInterfacedActor(typeof(IOverloaded))]
    public static class IOverloaded__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(IOverloaded__Min__Invoke), typeof(IOverloaded__Min__Return)},
                {typeof(IOverloaded__Min_2__Invoke), typeof(IOverloaded__Min_2__Return)},
                {typeof(IOverloaded__Min_3__Invoke), typeof(IOverloaded__Min_3__Return)},
            };
        }
    }

    public class IOverloaded__Min__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 a;
        public System.Int32 b;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IOverloaded)target).Min(a, b);
            return (IValueGetable)(new IOverloaded__Min__Return { v = __v });
        }
    }

    public class IOverloaded__Min__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public object Value { get { return v; } }
    }

    public class IOverloaded__Min_2__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32 a;
        public System.Int32 b;
        public System.Int32 c;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IOverloaded)target).Min(a, b, c);
            return (IValueGetable)(new IOverloaded__Min_2__Return { v = __v });
        }
    }

    public class IOverloaded__Min_2__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public object Value { get { return v; } }
    }

    public class IOverloaded__Min_3__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.Int32[] nums;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public async Task<IValueGetable> Invoke(object target)
        {
            var __v = await((IOverloaded)target).Min(nums);
            return (IValueGetable)(new IOverloaded__Min_3__Return { v = __v });
        }
    }

    public class IOverloaded__Min_3__Return : IInterfacedMessage, IValueGetable
    {
        public System.Int32 v;

        public Type GetInterfaceType() { return typeof(IOverloaded); }

        public object Value { get { return v; } }
    }

    public class OverloadedRef : InterfacedActorRef, IOverloaded
    {
        public OverloadedRef(IActorRef actor)
            : base(actor)
        {
        }

        public OverloadedRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public OverloadedRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new OverloadedRef(Actor, requestWaiter, Timeout);
        }

        public OverloadedRef WithTimeout(TimeSpan? timeout)
        {
            return new OverloadedRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Int32> Min(System.Int32 a, System.Int32 b)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IOverloaded__Min__Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> Min(System.Int32 a, System.Int32 b, System.Int32 c)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IOverloaded__Min_2__Invoke { a = a, b = b, c = c }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.Int32> Min(params System.Int32[] nums)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IOverloaded__Min_3__Invoke { nums = nums }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }
    }
}

#endregion

#region Basic.Interface.IWorker

namespace Basic.Interface
{
    [MessageTableForInterfacedActor(typeof(IWorker))]
    public static class IWorker__MessageTable
    {
        public static Type[,] GetMessageTypes()
        {
            return new Type[,]
            {
                {typeof(IWorker__Atomic__Invoke), null},
                {typeof(IWorker__Reentrant__Invoke), null},
            };
        }
    }

    public class IWorker__Atomic__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.String name;

        public Type GetInterfaceType() { return typeof(IWorker); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IWorker)target).Atomic(name);
            return null;
        }
    }

    public class IWorker__Reentrant__Invoke : IInterfacedMessage, IAsyncInvokable
    {
        public System.String name;

        public Type GetInterfaceType() { return typeof(IWorker); }

        public async Task<IValueGetable> Invoke(object target)
        {
            await ((IWorker)target).Reentrant(name);
            return null;
        }
    }

    public class WorkerRef : InterfacedActorRef, IWorker
    {
        public WorkerRef(IActorRef actor)
            : base(actor)
        {
        }

        public WorkerRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public WorkerRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new WorkerRef(Actor, requestWaiter, Timeout);
        }

        public WorkerRef WithTimeout(TimeSpan? timeout)
        {
            return new WorkerRef(Actor, RequestWaiter, timeout);
        }

        public Task Atomic(System.String name)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IWorker__Atomic__Invoke { name = name }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Reentrant(System.String name)
        {
            var requestMessage = new RequestMessage
            {
                Message = new IWorker__Reentrant__Invoke { name = name }
            };
            return SendRequestAndWait(requestMessage);
        }
    }
}

#endregion

#region Basic.Interface.IEventObserver

namespace Basic.Interface
{
    public class IEventObserver__OnBuy__Invoke : IInvokable
    {
        public System.String name;
        public System.Int32 price;

        public void Invoke(object target)
        {
            ((IEventObserver)target).OnBuy(name, price);
        }
    }

    public class IEventObserver__OnSell__Invoke : IInvokable
    {
        public System.String name;
        public System.Int32 price;

        public void Invoke(object target)
        {
            ((IEventObserver)target).OnSell(name, price);
        }
    }

    public class EventObserver : InterfacedObserver, IEventObserver
    {
        public EventObserver(INotificationChannel channel, int observerId)
            : base(channel, observerId)
        {
        }

        public void OnBuy(System.String name, System.Int32 price)
        {
            var message = new IEventObserver__OnBuy__Invoke { name = name, price = price };
            Notify(message);
        }

        public void OnSell(System.String name, System.Int32 price)
        {
            var message = new IEventObserver__OnSell__Invoke { name = name, price = price };
            Notify(message);
        }
    }
}

#endregion
