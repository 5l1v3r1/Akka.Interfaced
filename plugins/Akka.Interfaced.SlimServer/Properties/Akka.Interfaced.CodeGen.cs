// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;

#region Akka.Interfaced.SlimServer.IActorBoundChannel

namespace Akka.Interfaced.SlimServer
{
    [PayloadTable(typeof(IActorBoundChannel), PayloadTableKind.Request)]
    public static class IActorBoundChannel_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(BindActor_Invoke), typeof(BindActor_Return) },
                { typeof(BindActor_2_Invoke), typeof(BindActor_2_Return) },
                { typeof(BindType_Invoke), typeof(BindType_Return) },
                { typeof(Close_Invoke), null },
                { typeof(SetTag_Invoke), null },
                { typeof(UnbindActor_Invoke), typeof(UnbindActor_Return) },
                { typeof(UnbindType_Invoke), typeof(UnbindType_Return) },
            };
        }

        public class BindActor_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Akka.Actor.IActorRef actor;
            public Akka.Interfaced.SlimServer.TaggedType[] types;
            public Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IActorBoundChannel)__target).BindActor(actor, types, bindingFlags);
                return (IValueGetable)(new BindActor_Return { v = __v });
            }
        }

        public class BindActor_Return
            : IInterfacedPayload, IValueGetable
        {
            public Akka.Interfaced.BoundActorTarget v;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class BindActor_2_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Akka.Interfaced.InterfacedActorRef actor;
            public Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IActorBoundChannel)__target).BindActor(actor, bindingFlags);
                return (IValueGetable)(new BindActor_2_Return { v = __v });
            }
        }

        public class BindActor_2_Return
            : IInterfacedPayload, IValueGetable
        {
            public Akka.Interfaced.InterfacedActorRef v;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class BindType_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Akka.Actor.IActorRef actor;
            public Akka.Interfaced.SlimServer.TaggedType[] types;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IActorBoundChannel)__target).BindType(actor, types);
                return (IValueGetable)(new BindType_Return { v = __v });
            }
        }

        public class BindType_Return
            : IInterfacedPayload, IValueGetable
        {
            public bool v;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class Close_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IActorBoundChannel)__target).Close();
                return null;
            }
        }

        public class SetTag_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public object tag;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IActorBoundChannel)__target).SetTag(tag);
                return null;
            }
        }

        public class UnbindActor_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Akka.Actor.IActorRef actor;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IActorBoundChannel)__target).UnbindActor(actor);
                return (IValueGetable)(new UnbindActor_Return { v = __v });
            }
        }

        public class UnbindActor_Return
            : IInterfacedPayload, IValueGetable
        {
            public bool v;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class UnbindType_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Akka.Actor.IActorRef actor;
            public System.Type[] types;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IActorBoundChannel)__target).UnbindType(actor, types);
                return (IValueGetable)(new UnbindType_Return { v = __v });
            }
        }

        public class UnbindType_Return
            : IInterfacedPayload, IValueGetable
        {
            public bool v;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannel);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IActorBoundChannel_NoReply
    {
        void BindActor(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0);
        void BindActor(Akka.Interfaced.InterfacedActorRef actor, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0);
        void BindType(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types);
        void Close();
        void SetTag(object tag);
        void UnbindActor(Akka.Actor.IActorRef actor);
        void UnbindType(Akka.Actor.IActorRef actor, System.Type[] types);
    }

    public class ActorBoundChannelRef : InterfacedActorRef, IActorBoundChannel, IActorBoundChannel_NoReply
    {
        public override Type InterfaceType => typeof(IActorBoundChannel);

        public ActorBoundChannelRef() : base(null)
        {
        }

        public ActorBoundChannelRef(IRequestTarget target) : base(target)
        {
        }

        public ActorBoundChannelRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IActorBoundChannel_NoReply WithNoReply()
        {
            return this;
        }

        public ActorBoundChannelRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new ActorBoundChannelRef(Target, requestWaiter, Timeout);
        }

        public ActorBoundChannelRef WithTimeout(TimeSpan? timeout)
        {
            return new ActorBoundChannelRef(Target, RequestWaiter, timeout);
        }

        public Task<Akka.Interfaced.BoundActorTarget> BindActor(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.BindActor_Invoke { actor = actor, types = types, bindingFlags = bindingFlags }
            };
            return SendRequestAndReceive<Akka.Interfaced.BoundActorTarget>(requestMessage);
        }

        public Task<Akka.Interfaced.InterfacedActorRef> BindActor(Akka.Interfaced.InterfacedActorRef actor, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.BindActor_2_Invoke { actor = actor, bindingFlags = bindingFlags }
            };
            return SendRequestAndReceive<Akka.Interfaced.InterfacedActorRef>(requestMessage);
        }

        public Task<bool> BindType(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.BindType_Invoke { actor = actor, types = types }
            };
            return SendRequestAndReceive<bool>(requestMessage);
        }

        public Task Close()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.Close_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task SetTag(object tag)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.SetTag_Invoke { tag = tag }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<bool> UnbindActor(Akka.Actor.IActorRef actor)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.UnbindActor_Invoke { actor = actor }
            };
            return SendRequestAndReceive<bool>(requestMessage);
        }

        public Task<bool> UnbindType(Akka.Actor.IActorRef actor, System.Type[] types)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.UnbindType_Invoke { actor = actor, types = types }
            };
            return SendRequestAndReceive<bool>(requestMessage);
        }

        void IActorBoundChannel_NoReply.BindActor(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.BindActor_Invoke { actor = actor, types = types, bindingFlags = bindingFlags }
            };
            SendRequest(requestMessage);
        }

        void IActorBoundChannel_NoReply.BindActor(Akka.Interfaced.InterfacedActorRef actor, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.BindActor_2_Invoke { actor = actor, bindingFlags = bindingFlags }
            };
            SendRequest(requestMessage);
        }

        void IActorBoundChannel_NoReply.BindType(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.BindType_Invoke { actor = actor, types = types }
            };
            SendRequest(requestMessage);
        }

        void IActorBoundChannel_NoReply.Close()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.Close_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IActorBoundChannel_NoReply.SetTag(object tag)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.SetTag_Invoke { tag = tag }
            };
            SendRequest(requestMessage);
        }

        void IActorBoundChannel_NoReply.UnbindActor(Akka.Actor.IActorRef actor)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.UnbindActor_Invoke { actor = actor }
            };
            SendRequest(requestMessage);
        }

        void IActorBoundChannel_NoReply.UnbindType(Akka.Actor.IActorRef actor, System.Type[] types)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundChannel_PayloadTable.UnbindType_Invoke { actor = actor, types = types }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IActorBoundChannel))]
    public interface IActorBoundChannelSync : IInterfacedActorSync
    {
        Akka.Interfaced.BoundActorTarget BindActor(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0);
        Akka.Interfaced.InterfacedActorRef BindActor(Akka.Interfaced.InterfacedActorRef actor, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0);
        bool BindType(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types);
        void Close();
        void SetTag(object tag);
        bool UnbindActor(Akka.Actor.IActorRef actor);
        bool UnbindType(Akka.Actor.IActorRef actor, System.Type[] types);
    }
}

#endregion
#region Akka.Interfaced.SlimServer.IActorBoundGateway

namespace Akka.Interfaced.SlimServer
{
    [PayloadTable(typeof(IActorBoundGateway), PayloadTableKind.Request)]
    public static class IActorBoundGateway_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(OpenChannel_Invoke), typeof(OpenChannel_Return) },
                { typeof(OpenChannel_2_Invoke), typeof(OpenChannel_2_Return) },
            };
        }

        public class OpenChannel_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Akka.Actor.IActorRef actor;
            public Akka.Interfaced.SlimServer.TaggedType[] types;
            public object tag;
            public Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundGateway);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IActorBoundGateway)__target).OpenChannel(actor, types, tag, bindingFlags);
                return (IValueGetable)(new OpenChannel_Return { v = __v });
            }
        }

        public class OpenChannel_Return
            : IInterfacedPayload, IValueGetable
        {
            public Akka.Interfaced.BoundActorTarget v;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundGateway);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class OpenChannel_2_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Akka.Interfaced.InterfacedActorRef actor;
            public object tag;
            public Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundGateway);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IActorBoundGateway)__target).OpenChannel(actor, tag, bindingFlags);
                return (IValueGetable)(new OpenChannel_2_Return { v = __v });
            }
        }

        public class OpenChannel_2_Return
            : IInterfacedPayload, IValueGetable
        {
            public Akka.Interfaced.InterfacedActorRef v;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundGateway);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IActorBoundGateway_NoReply
    {
        void OpenChannel(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types, object tag = null, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0);
        void OpenChannel(Akka.Interfaced.InterfacedActorRef actor, object tag = null, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0);
    }

    public class ActorBoundGatewayRef : InterfacedActorRef, IActorBoundGateway, IActorBoundGateway_NoReply
    {
        public override Type InterfaceType => typeof(IActorBoundGateway);

        public ActorBoundGatewayRef() : base(null)
        {
        }

        public ActorBoundGatewayRef(IRequestTarget target) : base(target)
        {
        }

        public ActorBoundGatewayRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IActorBoundGateway_NoReply WithNoReply()
        {
            return this;
        }

        public ActorBoundGatewayRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new ActorBoundGatewayRef(Target, requestWaiter, Timeout);
        }

        public ActorBoundGatewayRef WithTimeout(TimeSpan? timeout)
        {
            return new ActorBoundGatewayRef(Target, RequestWaiter, timeout);
        }

        public Task<Akka.Interfaced.BoundActorTarget> OpenChannel(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types, object tag = null, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundGateway_PayloadTable.OpenChannel_Invoke { actor = actor, types = types, tag = tag, bindingFlags = bindingFlags }
            };
            return SendRequestAndReceive<Akka.Interfaced.BoundActorTarget>(requestMessage);
        }

        public Task<Akka.Interfaced.InterfacedActorRef> OpenChannel(Akka.Interfaced.InterfacedActorRef actor, object tag = null, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundGateway_PayloadTable.OpenChannel_2_Invoke { actor = actor, tag = tag, bindingFlags = bindingFlags }
            };
            return SendRequestAndReceive<Akka.Interfaced.InterfacedActorRef>(requestMessage);
        }

        void IActorBoundGateway_NoReply.OpenChannel(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types, object tag, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundGateway_PayloadTable.OpenChannel_Invoke { actor = actor, types = types, tag = tag, bindingFlags = bindingFlags }
            };
            SendRequest(requestMessage);
        }

        void IActorBoundGateway_NoReply.OpenChannel(Akka.Interfaced.InterfacedActorRef actor, object tag, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IActorBoundGateway_PayloadTable.OpenChannel_2_Invoke { actor = actor, tag = tag, bindingFlags = bindingFlags }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IActorBoundGateway))]
    public interface IActorBoundGatewaySync : IInterfacedActorSync
    {
        Akka.Interfaced.BoundActorTarget OpenChannel(Akka.Actor.IActorRef actor, Akka.Interfaced.SlimServer.TaggedType[] types, object tag = null, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0);
        Akka.Interfaced.InterfacedActorRef OpenChannel(Akka.Interfaced.InterfacedActorRef actor, object tag = null, Akka.Interfaced.SlimServer.ActorBindingFlags bindingFlags = (Akka.Interfaced.SlimServer.ActorBindingFlags)0);
    }
}

#endregion
#region Akka.Interfaced.SlimServer.IActorBoundChannelObserver

namespace Akka.Interfaced.SlimServer
{
    [PayloadTable(typeof(IActorBoundChannelObserver), PayloadTableKind.Notification)]
    public static class IActorBoundChannelObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(ChannelClose_Invoke),
                typeof(ChannelOpen_Invoke),
                typeof(ChannelOpenTimeout_Invoke),
            };
        }

        public class ChannelClose_Invoke : IInterfacedPayload, IInvokable
        {
            public Akka.Interfaced.SlimServer.IActorBoundChannel channel;
            public object tag;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannelObserver);
            }

            public void Invoke(object __target)
            {
                ((IActorBoundChannelObserver)__target).ChannelClose(channel, tag);
            }
        }

        public class ChannelOpen_Invoke : IInterfacedPayload, IInvokable
        {
            public Akka.Interfaced.SlimServer.IActorBoundChannel channel;
            public object tag;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannelObserver);
            }

            public void Invoke(object __target)
            {
                ((IActorBoundChannelObserver)__target).ChannelOpen(channel, tag);
            }
        }

        public class ChannelOpenTimeout_Invoke : IInterfacedPayload, IInvokable
        {
            public object tag;

            public Type GetInterfaceType()
            {
                return typeof(IActorBoundChannelObserver);
            }

            public void Invoke(object __target)
            {
                ((IActorBoundChannelObserver)__target).ChannelOpenTimeout(tag);
            }
        }
    }

    public class ActorBoundChannelObserver : InterfacedObserver, IActorBoundChannelObserver
    {
        public ActorBoundChannelObserver()
            : base(null, 0)
        {
        }

        public ActorBoundChannelObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public void ChannelClose(Akka.Interfaced.SlimServer.IActorBoundChannel channel, object tag)
        {
            var payload = new IActorBoundChannelObserver_PayloadTable.ChannelClose_Invoke { channel = channel, tag = tag };
            Notify(payload);
        }

        public void ChannelOpen(Akka.Interfaced.SlimServer.IActorBoundChannel channel, object tag)
        {
            var payload = new IActorBoundChannelObserver_PayloadTable.ChannelOpen_Invoke { channel = channel, tag = tag };
            Notify(payload);
        }

        public void ChannelOpenTimeout(object tag)
        {
            var payload = new IActorBoundChannelObserver_PayloadTable.ChannelOpenTimeout_Invoke { tag = tag };
            Notify(payload);
        }
    }

    [AlternativeInterface(typeof(IActorBoundChannelObserver))]
    public interface IActorBoundChannelObserverAsync : IInterfacedObserverSync
    {
        Task ChannelClose(Akka.Interfaced.SlimServer.IActorBoundChannel channel, object tag);
        Task ChannelOpen(Akka.Interfaced.SlimServer.IActorBoundChannel channel, object tag);
        Task ChannelOpenTimeout(object tag);
    }
}

#endregion
