// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;

#region Manual.IGreeter

namespace Manual
{
    [PayloadTable(typeof(IGreeter), PayloadTableKind.Request)]
    public static class IGreeter_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetCount_Invoke), typeof(GetCount_Return) },
                { typeof(Greet_Invoke), typeof(Greet_Return) },
            };
        }

        public class GetCount_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGreeter);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGreeter)__target).GetCount();
                return (IValueGetable)(new GetCount_Return { v = __v });
            }
        }

        public class GetCount_Return
            : IInterfacedPayload, IValueGetable
        {
            public int v;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class Greet_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public string name;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGreeter)__target).Greet(name);
                return (IValueGetable)(new Greet_Return { v = __v });
            }
        }

        public class Greet_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IGreeter_NoReply
    {
        void GetCount();
        void Greet(string name);
    }

    public class GreeterRef : InterfacedActorRef, IGreeter, IGreeter_NoReply
    {
        public override Type InterfaceType => typeof(IGreeter);

        public GreeterRef() : base(null)
        {
        }

        public GreeterRef(IRequestTarget target) : base(target)
        {
        }

        public GreeterRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IGreeter_NoReply WithNoReply()
        {
            return this;
        }

        public GreeterRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GreeterRef(Target, requestWaiter, Timeout);
        }

        public GreeterRef WithTimeout(TimeSpan? timeout)
        {
            return new GreeterRef(Target, RequestWaiter, timeout);
        }

        public Task<int> GetCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.GetCount_Invoke {  }
            };
            return SendRequestAndReceive<int>(requestMessage);
        }

        public Task<string> Greet(string name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.Greet_Invoke { name = name }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        void IGreeter_NoReply.GetCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.GetCount_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGreeter_NoReply.Greet(string name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.Greet_Invoke { name = name }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IGreeter))]
    public interface IGreeterSync : IInterfacedActorSync
    {
        int GetCount();
        string Greet(string name);
    }
}

#endregion
#region Manual.IGreeter<T>

namespace Manual
{
    [PayloadTable(typeof(IGreeter<>), PayloadTableKind.Request)]
    public static class IGreeter_PayloadTable<T> where T : System.ICloneable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetCount_Invoke), typeof(GetCount_Return) },
                { typeof(Greet_Invoke), typeof(Greet_Return) },
                { typeof(Greet_2_Invoke<>), typeof(Greet_2_Return<>) },
            };
        }

        public class GetCount_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGreeter<T>);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGreeter<T>)__target).GetCount();
                return (IValueGetable)(new GetCount_Return { v = __v });
            }
        }

        public class GetCount_Return
            : IInterfacedPayload, IValueGetable
        {
            public int v;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter<T>);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class Greet_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public T name;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter<T>);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGreeter<T>)__target).Greet(name);
                return (IValueGetable)(new Greet_Return { v = __v });
            }
        }

        public class Greet_Return
            : IInterfacedPayload, IValueGetable
        {
            public T v;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter<T>);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class Greet_2_Invoke<U>
            : IInterfacedPayload, IAsyncInvokable where U : System.IComparable<U>
        {
            public U name;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter<T>);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGreeter<T>)__target).Greet<U>(name);
                return (IValueGetable)(new Greet_2_Return<U> { v = __v });
            }
        }

        public class Greet_2_Return<U>
            : IInterfacedPayload, IValueGetable where U : System.IComparable<U>
        {
            public T v;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter<T>);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IGreeter_NoReply<T> where T : System.ICloneable
    {
        void GetCount();
        void Greet(T name);
        void Greet<U>(U name) where U : System.IComparable<U>;
    }

    public class GreeterRef<T> : InterfacedActorRef, IGreeter<T>, IGreeter_NoReply<T> where T : System.ICloneable
    {
        public override Type InterfaceType => typeof(IGreeter<T>);

        public GreeterRef() : base(null)
        {
        }

        public GreeterRef(IRequestTarget target) : base(target)
        {
        }

        public GreeterRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IGreeter_NoReply<T> WithNoReply()
        {
            return this;
        }

        public GreeterRef<T> WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GreeterRef<T>(Target, requestWaiter, Timeout);
        }

        public GreeterRef<T> WithTimeout(TimeSpan? timeout)
        {
            return new GreeterRef<T>(Target, RequestWaiter, timeout);
        }

        public Task<int> GetCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable<T>.GetCount_Invoke {  }
            };
            return SendRequestAndReceive<int>(requestMessage);
        }

        public Task<T> Greet(T name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable<T>.Greet_Invoke { name = name }
            };
            return SendRequestAndReceive<T>(requestMessage);
        }

        public Task<T> Greet<U>(U name) where U : System.IComparable<U>
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable<T>.Greet_2_Invoke<U> { name = name }
            };
            return SendRequestAndReceive<T>(requestMessage);
        }

        void IGreeter_NoReply<T>.GetCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable<T>.GetCount_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGreeter_NoReply<T>.Greet(T name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable<T>.Greet_Invoke { name = name }
            };
            SendRequest(requestMessage);
        }

        void IGreeter_NoReply<T>.Greet<U>(U name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable<T>.Greet_2_Invoke<U> { name = name }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IGreeter<>))]
    public interface IGreeterSync<T> : IInterfacedActorSync where T : System.ICloneable
    {
        int GetCount();
        T Greet(T name);
        T Greet<U>(U name) where U : System.IComparable<U>;
    }
}

#endregion
#region Manual.IGreeterWithObserver

namespace Manual
{
    [PayloadTable(typeof(IGreeterWithObserver), PayloadTableKind.Request)]
    public static class IGreeterWithObserver_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Subscribe_Invoke), null },
                { typeof(Unsubscribe_Invoke), null },
            };
        }

        public class Subscribe_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public Manual.IGreetObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IGreeterWithObserver);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGreeterWithObserver)__target).Subscribe(observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        public class Unsubscribe_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public Manual.IGreetObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IGreeterWithObserver);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGreeterWithObserver)__target).Unsubscribe(observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }
    }

    public interface IGreeterWithObserver_NoReply : IGreeter_NoReply
    {
        void Subscribe(Manual.IGreetObserver observer);
        void Unsubscribe(Manual.IGreetObserver observer);
    }

    public class GreeterWithObserverRef : InterfacedActorRef, IGreeterWithObserver, IGreeterWithObserver_NoReply
    {
        public override Type InterfaceType => typeof(IGreeterWithObserver);

        public GreeterWithObserverRef() : base(null)
        {
        }

        public GreeterWithObserverRef(IRequestTarget target) : base(target)
        {
        }

        public GreeterWithObserverRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IGreeterWithObserver_NoReply WithNoReply()
        {
            return this;
        }

        public GreeterWithObserverRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GreeterWithObserverRef(Target, requestWaiter, Timeout);
        }

        public GreeterWithObserverRef WithTimeout(TimeSpan? timeout)
        {
            return new GreeterWithObserverRef(Target, RequestWaiter, timeout);
        }

        public Task Subscribe(Manual.IGreetObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeterWithObserver_PayloadTable.Subscribe_Invoke { observer = (GreetObserver)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Unsubscribe(Manual.IGreetObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeterWithObserver_PayloadTable.Unsubscribe_Invoke { observer = (GreetObserver)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<int> GetCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.GetCount_Invoke {  }
            };
            return SendRequestAndReceive<int>(requestMessage);
        }

        public Task<string> Greet(string name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.Greet_Invoke { name = name }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        void IGreeterWithObserver_NoReply.Subscribe(Manual.IGreetObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeterWithObserver_PayloadTable.Subscribe_Invoke { observer = (GreetObserver)observer }
            };
            SendRequest(requestMessage);
        }

        void IGreeterWithObserver_NoReply.Unsubscribe(Manual.IGreetObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeterWithObserver_PayloadTable.Unsubscribe_Invoke { observer = (GreetObserver)observer }
            };
            SendRequest(requestMessage);
        }

        void IGreeter_NoReply.GetCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.GetCount_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGreeter_NoReply.Greet(string name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.Greet_Invoke { name = name }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IGreeterWithObserver))]
    public interface IGreeterWithObserverSync : IGreeterSync
    {
        void Subscribe(Manual.IGreetObserver observer);
        void Unsubscribe(Manual.IGreetObserver observer);
    }
}

#endregion
#region Manual.IGreetObserver

namespace Manual
{
    [PayloadTable(typeof(IGreetObserver), PayloadTableKind.Notification)]
    public static class IGreetObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(Event_Invoke),
            };
        }

        public class Event_Invoke : IInterfacedPayload, IInvokable
        {
            public string message;

            public Type GetInterfaceType()
            {
                return typeof(IGreetObserver);
            }

            public void Invoke(object __target)
            {
                ((IGreetObserver)__target).Event(message);
            }
        }
    }

    public class GreetObserver : InterfacedObserver, IGreetObserver
    {
        public GreetObserver()
            : base(null, 0)
        {
        }

        public GreetObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public void Event(string message)
        {
            var payload = new IGreetObserver_PayloadTable.Event_Invoke { message = message };
            Notify(payload);
        }
    }

    [AlternativeInterface(typeof(IGreetObserver))]
    public interface IGreetObserverAsync : IInterfacedObserverSync
    {
        Task Event(string message);
    }
}

#endregion
