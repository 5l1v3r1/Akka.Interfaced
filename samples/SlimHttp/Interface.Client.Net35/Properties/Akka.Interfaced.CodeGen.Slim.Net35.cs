// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;

#region SlimHttp.Interface.ICalculator

namespace SlimHttp.Interface
{
    [PayloadTable(typeof(ICalculator), PayloadTableKind.Request)]
    public static class ICalculator_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Concat_Invoke), typeof(Concat_Return) },
                { typeof(Sum_Invoke), typeof(Sum_Return) },
            };
        }

        public class Concat_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public string a;
            public string b;

            public Type GetInterfaceType()
            {
                return typeof(ICalculator);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class Concat_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(ICalculator);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class Sum_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public int a;
            public int b;

            public Type GetInterfaceType()
            {
                return typeof(ICalculator);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class Sum_Return
            : IInterfacedPayload, IValueGetable
        {
            public int v;

            public Type GetInterfaceType()
            {
                return typeof(ICalculator);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface ICalculator_NoReply
    {
        void Concat(string a, string b);
        void Sum(int a, int b);
    }

    public class CalculatorRef : InterfacedActorRef, ICalculator, ICalculator_NoReply
    {
        public override Type InterfaceType => typeof(ICalculator);

        public CalculatorRef() : base(null)
        {
        }

        public CalculatorRef(IRequestTarget target) : base(target)
        {
        }

        public CalculatorRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public ICalculator_NoReply WithNoReply()
        {
            return this;
        }

        public CalculatorRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new CalculatorRef(Target, requestWaiter, Timeout);
        }

        public CalculatorRef WithTimeout(TimeSpan? timeout)
        {
            return new CalculatorRef(Target, RequestWaiter, timeout);
        }

        public Task<string> Concat(string a, string b)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICalculator_PayloadTable.Concat_Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        public Task<int> Sum(int a, int b)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICalculator_PayloadTable.Sum_Invoke { a = a, b = b }
            };
            return SendRequestAndReceive<int>(requestMessage);
        }

        void ICalculator_NoReply.Concat(string a, string b)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICalculator_PayloadTable.Concat_Invoke { a = a, b = b }
            };
            SendRequest(requestMessage);
        }

        void ICalculator_NoReply.Sum(int a, int b)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICalculator_PayloadTable.Sum_Invoke { a = a, b = b }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
#region SlimHttp.Interface.ICounter

namespace SlimHttp.Interface
{
    [PayloadTable(typeof(ICounter), PayloadTableKind.Request)]
    public static class ICounter_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetCounter_Invoke), typeof(GetCounter_Return) },
                { typeof(IncCounter_Invoke), null },
            };
        }

        public class GetCounter_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(ICounter);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class GetCounter_Return
            : IInterfacedPayload, IValueGetable
        {
            public int v;

            public Type GetInterfaceType()
            {
                return typeof(ICounter);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class IncCounter_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public int delta;

            public Type GetInterfaceType()
            {
                return typeof(ICounter);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }
    }

    public interface ICounter_NoReply
    {
        void GetCounter();
        void IncCounter(int delta);
    }

    public class CounterRef : InterfacedActorRef, ICounter, ICounter_NoReply
    {
        public override Type InterfaceType => typeof(ICounter);

        public CounterRef() : base(null)
        {
        }

        public CounterRef(IRequestTarget target) : base(target)
        {
        }

        public CounterRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public ICounter_NoReply WithNoReply()
        {
            return this;
        }

        public CounterRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new CounterRef(Target, requestWaiter, Timeout);
        }

        public CounterRef WithTimeout(TimeSpan? timeout)
        {
            return new CounterRef(Target, RequestWaiter, timeout);
        }

        public Task<int> GetCounter()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICounter_PayloadTable.GetCounter_Invoke {  }
            };
            return SendRequestAndReceive<int>(requestMessage);
        }

        public Task IncCounter(int delta)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICounter_PayloadTable.IncCounter_Invoke { delta = delta }
            };
            return SendRequestAndWait(requestMessage);
        }

        void ICounter_NoReply.GetCounter()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICounter_PayloadTable.GetCounter_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void ICounter_NoReply.IncCounter(int delta)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ICounter_PayloadTable.IncCounter_Invoke { delta = delta }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
#region SlimHttp.Interface.IGreeter

namespace SlimHttp.Interface
{
    [PayloadTable(typeof(IGreeter), PayloadTableKind.Request)]
    public static class IGreeter_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetCount_Invoke), typeof(GetCount_Return) },
                { typeof(Greet_Invoke), typeof(Greet_Return) },
            };
        }

        public class GetCount_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGreeter);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class GetCount_Return
            : IInterfacedPayload, IValueGetable
        {
            public int v;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class Greet_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public string name;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class Greet_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(IGreeter);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IGreeter_NoReply
    {
        void GetCount();
        void Greet(string name);
    }

    public class GreeterRef : InterfacedActorRef, IGreeter, IGreeter_NoReply
    {
        public override Type InterfaceType => typeof(IGreeter);

        public GreeterRef() : base(null)
        {
        }

        public GreeterRef(IRequestTarget target) : base(target)
        {
        }

        public GreeterRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IGreeter_NoReply WithNoReply()
        {
            return this;
        }

        public GreeterRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GreeterRef(Target, requestWaiter, Timeout);
        }

        public GreeterRef WithTimeout(TimeSpan? timeout)
        {
            return new GreeterRef(Target, RequestWaiter, timeout);
        }

        public Task<int> GetCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.GetCount_Invoke {  }
            };
            return SendRequestAndReceive<int>(requestMessage);
        }

        public Task<string> Greet(string name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.Greet_Invoke { name = name }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        void IGreeter_NoReply.GetCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.GetCount_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGreeter_NoReply.Greet(string name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.Greet_Invoke { name = name }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
#region SlimHttp.Interface.IPedantic

namespace SlimHttp.Interface
{
    [PayloadTable(typeof(IPedantic), PayloadTableKind.Request)]
    public static class IPedantic_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(TestCall_Invoke), null },
                { typeof(TestOptional_Invoke), typeof(TestOptional_Return) },
                { typeof(TestParams_Invoke), typeof(TestParams_Return) },
                { typeof(TestPassClass_Invoke), typeof(TestPassClass_Return) },
                { typeof(TestReturnClass_Invoke), typeof(TestReturnClass_Return) },
                { typeof(TestTuple_Invoke), typeof(TestTuple_Return) },
            };
        }

        public class TestCall_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class TestOptional_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Nullable<int> value;

            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class TestOptional_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Nullable<int> v;

            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class TestParams_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Int32[] values;

            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class TestParams_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Int32[] v;

            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class TestPassClass_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public SlimHttp.Interface.TestParam param;

            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class TestPassClass_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class TestReturnClass_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public int value;
            public int offset;

            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class TestReturnClass_Return
            : IInterfacedPayload, IValueGetable
        {
            public SlimHttp.Interface.TestResult v;

            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class TestTuple_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Tuple<int, string> value;

            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        public class TestTuple_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Tuple<int, string> v;

            public Type GetInterfaceType()
            {
                return typeof(IPedantic);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IPedantic_NoReply
    {
        void TestCall();
        void TestOptional(System.Nullable<int> value);
        void TestParams(params System.Int32[] values);
        void TestPassClass(SlimHttp.Interface.TestParam param);
        void TestReturnClass(int value, int offset);
        void TestTuple(System.Tuple<int, string> value);
    }

    public class PedanticRef : InterfacedActorRef, IPedantic, IPedantic_NoReply
    {
        public override Type InterfaceType => typeof(IPedantic);

        public PedanticRef() : base(null)
        {
        }

        public PedanticRef(IRequestTarget target) : base(target)
        {
        }

        public PedanticRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IPedantic_NoReply WithNoReply()
        {
            return this;
        }

        public PedanticRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new PedanticRef(Target, requestWaiter, Timeout);
        }

        public PedanticRef WithTimeout(TimeSpan? timeout)
        {
            return new PedanticRef(Target, RequestWaiter, timeout);
        }

        public Task TestCall()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestCall_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Nullable<int>> TestOptional(System.Nullable<int> value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestOptional_Invoke { value = value }
            };
            return SendRequestAndReceive<System.Nullable<int>>(requestMessage);
        }

        public Task<System.Int32[]> TestParams(params System.Int32[] values)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestParams_Invoke { values = values }
            };
            return SendRequestAndReceive<System.Int32[]>(requestMessage);
        }

        public Task<string> TestPassClass(SlimHttp.Interface.TestParam param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestPassClass_Invoke { param = param }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        public Task<SlimHttp.Interface.TestResult> TestReturnClass(int value, int offset)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestReturnClass_Invoke { value = value, offset = offset }
            };
            return SendRequestAndReceive<SlimHttp.Interface.TestResult>(requestMessage);
        }

        public Task<System.Tuple<int, string>> TestTuple(System.Tuple<int, string> value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestTuple_Invoke { value = value }
            };
            return SendRequestAndReceive<System.Tuple<int, string>>(requestMessage);
        }

        void IPedantic_NoReply.TestCall()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestCall_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IPedantic_NoReply.TestOptional(System.Nullable<int> value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestOptional_Invoke { value = value }
            };
            SendRequest(requestMessage);
        }

        void IPedantic_NoReply.TestParams(params System.Int32[] values)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestParams_Invoke { values = values }
            };
            SendRequest(requestMessage);
        }

        void IPedantic_NoReply.TestPassClass(SlimHttp.Interface.TestParam param)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestPassClass_Invoke { param = param }
            };
            SendRequest(requestMessage);
        }

        void IPedantic_NoReply.TestReturnClass(int value, int offset)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestReturnClass_Invoke { value = value, offset = offset }
            };
            SendRequest(requestMessage);
        }

        void IPedantic_NoReply.TestTuple(System.Tuple<int, string> value)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPedantic_PayloadTable.TestTuple_Invoke { value = value }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
